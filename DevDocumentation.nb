(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 8.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       157,          7]
NotebookDataLength[    104919,       2196]
NotebookOptionsPosition[    100749,       2068]
NotebookOutlinePosition[    101341,       2091]
CellTagsIndexPosition[    101298,       2088]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["\<\
Genfunlib Developer Documentation\
\>", "Title",
 CellChangeTimes->{{3.5258767471351247`*^9, 3.525876752367424*^9}, {
   3.525877176063658*^9, 3.52587718011189*^9}, {3.5289793836424613`*^9, 
   3.5289793850245404`*^9}, 3.552501291317418*^9}],

Cell[CellGroupData[{

Cell["Ideas and notes", "Section",
 CellChangeTimes->{{3.5289844249528074`*^9, 3.5289844264168916`*^9}}],

Cell["\<\
possible components:
 code in .m files
 data in .m files (if small enough)
 user documentation: tutorial, guide, help pages - only pointers to \
mathematical background, usage messages
  formal specification?
 tests
 developer documentation: this and code comments
  proofs of correctness?\
\>", "Text",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBWIQrTExZGlyyivHeS+2gWkJ1ijjdCAd2zPBFER3/Xhr
BaLX+G20BdEXpsp6geigae2+INquf3YeiJ5omVcIonc8/9wHoouFbSeA6AlP
5KaA6LMPpswA0bXxcVtAtLjBNTAtczstOQNI7+ObkwKijdlmzwLRUnmMs0H0
Cofkb5lA+r966XcQPSFcgysLSGuZnwXTV5RkZbOB9I+eaiUQfYrJOR9Eq9Yl
g2nbE+8Xg+hDt+8uBdEKOlfXg+gCtS9geuOlO6E9IH9HmoSB6L4Q+9rg8leO
ZfO8wbR+AteWbiBdd60UTMfxxi64B6Q/OLktAdHsZQt311e/cvTLOwimAVeg
pe4=
  "]],

Cell["\<\
The User Documentation doesn\[CloseCurlyQuote]t talk about how the \
implementations compute; developer documentation does.  Extra, additional \
information will be found in Andrew MacFie\[CloseCurlyQuote]s master\
\[CloseCurlyQuote]s thesis.\
\>", "Text",
 CellChangeTimes->{{3.525883067152609*^9, 3.525883081991458*^9}, {
   3.525883152920515*^9, 3.52588315389157*^9}, {3.525883227455778*^9, 
   3.5258832376003585`*^9}, {3.525883288824288*^9, 3.525883289880348*^9}, {
   3.5258833325947914`*^9, 3.525883372912098*^9}, {3.525883422297922*^9, 
   3.5258834404279594`*^9}, {3.5258835052576675`*^9, 3.5258835735435734`*^9}, 
   3.5289278518896017`*^9, {3.528977087313119*^9, 3.5289770879951577`*^9}, {
   3.5289794356904383`*^9, 3.5289794661281796`*^9}, {3.5289795565243497`*^9, 
   3.5289796135316105`*^9}, 3.528979706506928*^9, 3.5289800739969473`*^9, {
   3.52898010744186*^9, 3.528980124152816*^9}, {3.5289801636650763`*^9, 
   3.5289801774718657`*^9}, {3.528980226113648*^9, 3.5289802452967453`*^9}, {
   3.528980382537595*^9, 3.5289804460362267`*^9}, 3.528980740377062*^9, {
   3.5363458644204683`*^9, 3.5363458847076283`*^9}, {3.5363461763553095`*^9, 
   3.5363462028598256`*^9}, {3.536346246043296*^9, 3.536346285419548*^9}, {
   3.536346438243289*^9, 3.5363464428515525`*^9}, {3.536346583435593*^9, 
   3.5363466436680384`*^9}, {3.5363467460528946`*^9, 3.536346761139757*^9}, {
   3.536347127012684*^9, 3.5363471309079065`*^9}, {3.53634720019587*^9, 
   3.5363472004838867`*^9}, {3.536347361269083*^9, 3.5363473784680667`*^9}, {
   3.536347665324474*^9, 3.536347754011546*^9}, {3.5363479282115097`*^9, 
   3.5363479287965436`*^9}, {3.5364350649718914`*^9, 3.536435069540153*^9}, {
   3.5423026400091877`*^9, 3.5423026465085597`*^9}, {3.5523368527629557`*^9, 
   3.5523368642106104`*^9}, {3.552507351397035*^9, 3.5525073709711547`*^9}, {
   3.5525074686677427`*^9, 3.552507486483762*^9}}],

Cell[TextData[{
 ButtonBox["Programmatic formatting for Mathematica code - possible?",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathematica.stackexchange.com/questions/2809/programmatic-\
formatting-for-mathematica-code-possible"], None},
  ButtonNote->
   "http://mathematica.stackexchange.com/questions/2809/programmatic-\
formatting-for-mathematica-code-possible"],
 "\n",
 ButtonBox["Syntax highlighting for your own functions",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathematica.stackexchange.com/questions/1446/syntax-\
highlighting-for-your-own-functions"], None},
  ButtonNote->
   "http://mathematica.stackexchange.com/questions/1446/syntax-highlighting-\
for-your-own-functions"],
 "\n",
 ButtonBox["Setting Up Mathematica Packages",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/mathematica/tutorial/\
SettingUpMathematicaPackages.html"], None},
  ButtonNote->
   "http://reference.wolfram.com/mathematica/tutorial/\
SettingUpMathematicaPackages.html"],
 "\n",
 ButtonBox["Making Mathematica packages",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://stackoverflow.com/questions/6633180/making-mathematica-\
packages/6633769#6633769"], None},
  ButtonNote->
   "http://stackoverflow.com/questions/6633180/making-mathematica-packages/\
6633769#6633769"]
}], "Text",
 CellChangeTimes->{{3.542304270537449*^9, 3.542304304021364*^9}, {
  3.5423049040776854`*^9, 3.542304965770214*^9}, {3.542305664302168*^9, 
  3.5423056759768353`*^9}}],

Cell[TextData[{
 "User documentation method:\n ",
 ButtonBox["Authoring Using DocumentationTools",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/workbench/index.jsp?topic=/com.wolfram.\
eclipse.help/html/reference/DocumentationTools/tutorial/\
AuthoringSymbolPagesUsingDocumentationTools.html"], None},
  ButtonNote->
   "http://reference.wolfram.com/workbench/index.jsp?topic=/com.wolfram.\
eclipse.help/html/reference/DocumentationTools/tutorial/\
AuthoringSymbolPagesUsingDocumentationTools.html"],
 "\n ",
 ButtonBox["Mathematica Development User Guide > Tasks > Mathematica \
Documentation",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://reference.wolfram.com/workbench/index.jsp?topic=/com.wolfram.\
eclipse.help/html/helphome/help_home.html"], None},
  ButtonNote->
   "http://reference.wolfram.com/workbench/index.jsp?topic=/com.wolfram.\
eclipse.help/html/helphome/help_home.html"]
}], "Text",
 CellChangeTimes->{{3.542305512619492*^9, 3.542305573100951*^9}}],

Cell["\<\
mathematical background - point to references, we shouldn't write about that \
if it isn't necessary\
\>", "Text",
 CellChangeTimes->{{3.525883067152609*^9, 3.525883081991458*^9}, {
   3.525883152920515*^9, 3.52588315389157*^9}, {3.525883227455778*^9, 
   3.5258832376003585`*^9}, {3.525883288824288*^9, 3.525883289880348*^9}, {
   3.5258833325947914`*^9, 3.525883372912098*^9}, {3.525883422297922*^9, 
   3.5258834404279594`*^9}, {3.5258835052576675`*^9, 3.5258835735435734`*^9}, 
   3.5289278518896017`*^9, {3.528977087313119*^9, 3.5289770879951577`*^9}, {
   3.5289794356904383`*^9, 3.5289794661281796`*^9}, {3.5289795565243497`*^9, 
   3.5289796135316105`*^9}, 3.528979706506928*^9, 3.5289800739969473`*^9, {
   3.52898010744186*^9, 3.528980124152816*^9}, {3.5289801636650763`*^9, 
   3.5289801774718657`*^9}, {3.528980226113648*^9, 3.5289802452967453`*^9}, {
   3.528980382537595*^9, 3.5289804460362267`*^9}, 3.528980740377062*^9, {
   3.5363458644204683`*^9, 3.5363458847076283`*^9}, {3.5363461763553095`*^9, 
   3.5363462028598256`*^9}, {3.536346246043296*^9, 3.536346285419548*^9}, {
   3.536346438243289*^9, 3.5363464428515525`*^9}, {3.536346583435593*^9, 
   3.5363466436680384`*^9}, {3.5363467460528946`*^9, 3.536346761139757*^9}, {
   3.536347127012684*^9, 3.5363471309079065`*^9}, {3.53634720019587*^9, 
   3.5363472004838867`*^9}, {3.536347361269083*^9, 3.5363473784680667`*^9}, {
   3.536347665324474*^9, 3.536347754011546*^9}, {3.5363479282115097`*^9, 
   3.5363479287965436`*^9}, {3.5364350649718914`*^9, 3.536435069540153*^9}, {
   3.5423026400091877`*^9, 3.542302647260603*^9}}],

Cell["Put Web links to the project on relevant Web pages", "Text",
 CellChangeTimes->{{3.531669983282363*^9, 3.5316700698673153`*^9}}],

Cell["tell Wolfram|Alpha", "Text",
 CellChangeTimes->{{3.5371041087490044`*^9, 3.537104111156142*^9}, {
  3.554408415884966*^9, 3.5544084167490153`*^9}}],

Cell["Package pallettes?", "Text",
 CellChangeTimes->{{3.525883067152609*^9, 3.525883081991458*^9}, {
   3.525883152920515*^9, 3.52588315389157*^9}, {3.525883227455778*^9, 
   3.5258832376003585`*^9}, {3.525883288824288*^9, 3.525883289880348*^9}, {
   3.5258833325947914`*^9, 3.525883372912098*^9}, {3.525883422297922*^9, 
   3.5258834404279594`*^9}, {3.5258835052576675`*^9, 3.5258835735435734`*^9}, 
   3.5289278518896017`*^9, {3.528977087313119*^9, 3.5289770879951577`*^9}, {
   3.5289794356904383`*^9, 3.5289794661281796`*^9}, {3.5289795565243497`*^9, 
   3.5289796135316105`*^9}, 3.528979706506928*^9, 3.5289800739969473`*^9, {
   3.52898010744186*^9, 3.528980124152816*^9}, {3.5289801636650763`*^9, 
   3.52898017912096*^9}}],

Cell["\<\
CapitalCase and usage messages for public symbols, lowerCase for private \
symbols\
\>", "Text",
 CellChangeTimes->{{3.5522233603142395`*^9, 3.552223382090485*^9}, {
  3.552511910379794*^9, 3.5525119127719307`*^9}}],

Cell["\<\
Writing user documention last is OK as long as in-code documentation and this \
file are written diligently\
\>", "Text",
 CellChangeTimes->{{3.5523333601271887`*^9, 3.5523333992584267`*^9}, {
   3.552333539794465*^9, 3.5523335432346616`*^9}, {3.5523894756870527`*^9, 
   3.5523894768941216`*^9}, 3.552515782492266*^9}],

Cell["\<\
private symbols are defined before the first public symbol downvalue they\
\[CloseCurlyQuote]re used in\
\>", "Text",
 CellChangeTimes->{{3.5525168692924275`*^9, 3.5525168909076643`*^9}}],

Cell[TextData[{
 "private symbols don\[CloseCurlyQuote]t interfere with previously defined \
symbols in the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " session (in \[OpenCurlyDoubleQuote]Global`\[CloseCurlyDoubleQuote])."
}], "Text",
 CellChangeTimes->{{3.5523873452151966`*^9, 3.5523873718387194`*^9}, {
  3.5523874135351043`*^9, 3.552387416135253*^9}, {3.552389314318823*^9, 
  3.5523893200471506`*^9}, {3.552514629837338*^9, 3.552514630660385*^9}}],

Cell["\<\
The obvious sequel to this project would be adding enumeration functionality \
for RegularLanguages, SymbolicMethod, and Species.\
\>", "Text",
 CellChangeTimes->{{3.5545532378870173`*^9, 3.554553306790959*^9}, {
  3.554553914047692*^9, 3.5545539199350286`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Species", "Section",
 CellChangeTimes->{{3.5515457794760847`*^9, 3.551545811340907*^9}, 
   3.5515458660810385`*^9, 3.5515459652347097`*^9, {3.551547974084609*^9, 
   3.55154797550069*^9}}],

Cell[TextData[{
 ButtonBox["Sage",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://sagemath.org/doc/reference/combinat/species.html"], None},
  ButtonNote->"http://sagemath.org/doc/reference/combinat/species.html"],
 ", ",
 ButtonBox["aldor-combinat",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.risc.jku.at/people/hemmecke/AldorCombinat/"], None},
  ButtonNote->"http://www.risc.jku.at/people/hemmecke/AldorCombinat/"],
 ", book"
}], "Text",
 CellChangeTimes->{{3.5544006726920805`*^9, 3.554400690502099*^9}, {
  3.554400910401677*^9, 3.5544009104026766`*^9}}],

Cell["\<\
I (Andrew) don\[CloseCurlyQuote]t really know a lot about species.\
\>", "Text",
 CellChangeTimes->{{3.554499472454956*^9, 3.5544994788253202`*^9}, {
  3.5545533262630725`*^9, 3.554553327807161*^9}}],

Cell["\<\
predefined species
\tEmpty
\tCharacteristic
\tCycle
\tPartition
\tPermutation
\tLinear-order
\tSet
\tSubset\
\>", "Text",
 CellChangeTimes->{{3.5544009784925714`*^9, 3.5544009814847426`*^9}, {
  3.554495927705208*^9, 3.5544959456412334`*^9}}],

Cell["\<\
weighted species
\tsingletons may be weighted\
\>", "Text",
 CellChangeTimes->{{3.5544014334275923`*^9, 3.5544014365807724`*^9}, {
  3.554553373815792*^9, 3.554553386479517*^9}}],

Cell["\<\
restrictions
\trestriction by main parameter value\
\>", "Text",
 CellChangeTimes->{{3.5544949110080557`*^9, 3.5544949128171597`*^9}, {
  3.5545533926398687`*^9, 3.5545534049665737`*^9}}],

Cell["\<\
operations
\tproduct
\tsum
\t(partitional) composition
\t\tsubstitution into the first slot only (p. 85)
\tderivative
\t\tw.r.t. first slot only
\tpointing
\t\tw.r.t. first slot only\
\>", "Text",
 CellChangeTimes->{{3.554400983115836*^9, 3.55440098405289*^9}, {
  3.5544950972977114`*^9, 3.55449509954484*^9}, {3.5544953505291953`*^9, 
  3.5544953541774035`*^9}, {3.5544953898894463`*^9, 3.5544953918005557`*^9}, {
  3.5544957502810593`*^9, 3.5544957522971745`*^9}, {3.5544958595373087`*^9, 
  3.554495861497421*^9}, {3.554496160785539*^9, 3.5544961671449027`*^9}, {
  3.554551753632123*^9, 3.5545517819747443`*^9}, {3.5545519440320134`*^9, 
  3.5545519524314938`*^9}, {3.5545522171276336`*^9, 3.5545522328635335`*^9}}],

Cell["\<\
toGF(eqn)s
\tgenerating series
\tisomorphism type generating series
\tcycle index series\
\>", "Text",
 CellChangeTimes->{{3.5544009853959665`*^9, 3.554400994604493*^9}, {
  3.5544947706650286`*^9, 3.5544947758093233`*^9}, {3.5544948524487066`*^9, 
  3.554494863921363*^9}, {3.5544948991613784`*^9, 3.554494902568573*^9}}],

Cell["Bonus: implicit species", "Text",
 CellChangeTimes->{{3.554401440083973*^9, 3.554401445596288*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["GFeq2coefs", "Section",
 CellChangeTimes->{{3.5513651493618345`*^9, 3.551365150017872*^9}, {
   3.551365265714489*^9, 3.5513652744419885`*^9}, {3.5513653460980873`*^9, 
   3.5513654380903482`*^9}, 3.551365629522298*^9, {3.551366071699589*^9, 
   3.551366099466177*^9}, {3.5513751086796083`*^9, 3.5513751995348053`*^9}, {
   3.551377237640378*^9, 3.551377270974285*^9}, {3.551378360486601*^9, 
   3.551378373167327*^9}, {3.5513786144471273`*^9, 3.551378614911154*^9}, {
   3.5513914777417297`*^9, 3.5513914933806243`*^9}, {3.551392339870041*^9, 
   3.5513923838365555`*^9}, {3.5514444953390074`*^9, 3.551444498383181*^9}, {
   3.551444823257763*^9, 3.551444823977804*^9}, {3.551444941322516*^9, 
   3.5514449448797197`*^9}, {3.5514451046598587`*^9, 3.551445107472019*^9}, {
   3.5514452094268503`*^9, 3.551445214824159*^9}, {3.551446403842167*^9, 
   3.551446411375598*^9}, {3.551527605234988*^9, 3.5515276097922487`*^9}, {
   3.551533841491681*^9, 3.5515338756736364`*^9}, {3.551545726846074*^9, 
   3.5515457278211303`*^9}, {3.551560086254386*^9, 3.551560086957426*^9}, {
   3.552064233390174*^9, 3.552064245629874*^9}, {3.5528421415224686`*^9, 
   3.5528421632177095`*^9}, {3.5528424067606397`*^9, 3.5528424127639832`*^9}}],

Cell["SV: differentiate eqn, set var to 0, solve", "Text",
 CellChangeTimes->{{3.5513651493618345`*^9, 3.551365150017872*^9}, {
   3.551365265714489*^9, 3.5513652744419885`*^9}, {3.5513653460980873`*^9, 
   3.5513654380903482`*^9}, 3.551365629522298*^9, {3.551366071699589*^9, 
   3.551366099466177*^9}, {3.5513751086796083`*^9, 3.5513751995348053`*^9}, {
   3.551377237640378*^9, 3.551377270974285*^9}, {3.551378360486601*^9, 
   3.551378373167327*^9}, {3.5513786144471273`*^9, 3.551378614911154*^9}, {
   3.5513914777417297`*^9, 3.5513914933806243`*^9}, {3.551392339870041*^9, 
   3.5513923838365555`*^9}, {3.5514444953390074`*^9, 3.551444498383181*^9}, {
   3.551444823257763*^9, 3.551444823977804*^9}, {3.551444941322516*^9, 
   3.5514449448797197`*^9}, {3.5514451046598587`*^9, 3.551445107472019*^9}, {
   3.5514452094268503`*^9, 3.551445214824159*^9}, {3.551446403842167*^9, 
   3.551446411375598*^9}, {3.551527605234988*^9, 3.5515276097922487`*^9}, {
   3.551533841491681*^9, 3.5515338756736364`*^9}, {3.551545726846074*^9, 
   3.5515457278211303`*^9}, {3.551560086254386*^9, 3.551560086957426*^9}, {
   3.552064233390174*^9, 3.552064245629874*^9}, {3.5528421415224686`*^9, 
   3.5528421632177095`*^9}, 3.5528424067606397`*^9, {3.5529510925701756`*^9, 
   3.552951093978256*^9}}],

Cell[TextData[{
 "Note: for some ansatzes, there will be faster methods\n\te.g. repeatedly \
differentiating will take at least time exponential in ",
 Cell[BoxData[
  FormBox[
   RowBox[{"log", "(", "n", ")"}], TraditionalForm]]],
 ", but linear algorithms exist for rational series according to Jason"
}], "Text",
 CellChangeTimes->{{3.55353611138669*^9, 3.5535361284746675`*^9}, {
  3.5541988004424706`*^9, 3.554198906242616*^9}, {3.554199022192776*^9, 
  3.5541990231377773`*^9}}],

Cell["\<\
If derivatives are handled, initial values might also need to be handled.\
\>", "Text",
 CellChangeTimes->{{3.5540322652223053`*^9, 3.5540322797911386`*^9}}],

Cell["MV: ? repeated SV?", "Text",
 CellChangeTimes->{{3.5529510957853594`*^9, 3.552951096537402*^9}, {
  3.5545531942235203`*^9, 3.5545531999428473`*^9}}],

Cell["\<\
Idea: use Series to compute derivatives\
\>", "Text",
 CellChangeTimes->{{3.554198745302394*^9, 3.554198798082467*^9}, {
  3.554198941367665*^9, 3.554198949067675*^9}, {3.5543255814277816`*^9, 
  3.554325586883094*^9}}],

Cell[TextData[{
 "Note: ",
 Cell[BoxData["SeriesCoefficient"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 " can be used for ",
 Cell[BoxData["Root"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 " and ",
 Cell[BoxData["DifferentialRoot"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 " expressions"
}], "Text",
 CellChangeTimes->{{3.5544612328307743`*^9, 3.5544612951783404`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "GFeq2asymptoticCoef(gdev\[CloseCurlyQuote]s ",
 StyleBox["equivalent",
  FontSlant->"Italic"],
 ")"
}], "Section",
 CellChangeTimes->{{3.5513651493618345`*^9, 3.551365150017872*^9}, {
   3.551365265714489*^9, 3.5513652744419885`*^9}, {3.5513653460980873`*^9, 
   3.5513654380903482`*^9}, 3.551365629522298*^9, {3.551366071699589*^9, 
   3.551366099466177*^9}, {3.5513751086796083`*^9, 3.5513751995348053`*^9}, {
   3.551377237640378*^9, 3.551377270974285*^9}, {3.551378360486601*^9, 
   3.551378373167327*^9}, {3.5513786144471273`*^9, 3.551378614911154*^9}, {
   3.5513914777417297`*^9, 3.5513914933806243`*^9}, {3.551392339870041*^9, 
   3.5513923838365555`*^9}, {3.5514444953390074`*^9, 3.551444498383181*^9}, {
   3.551444823257763*^9, 3.551444823977804*^9}, {3.551444941322516*^9, 
   3.5514449448797197`*^9}, {3.5514451046598587`*^9, 3.551445107472019*^9}, {
   3.5514452094268503`*^9, 3.551445214824159*^9}, {3.551446403842167*^9, 
   3.551446411375598*^9}, {3.551527605234988*^9, 3.5515276097922487`*^9}, {
   3.551533841491681*^9, 3.5515338756736364`*^9}, {3.551545726846074*^9, 
   3.5515457278211303`*^9}, {3.551560086254386*^9, 3.551560086957426*^9}, {
   3.552064233390174*^9, 3.552064245629874*^9}, 3.5528421415224686`*^9, {
   3.553425730916511*^9, 3.5534257326756115`*^9}}],

Cell["\<\
Active research area: Bruno and \
http://www.cs.auckland.ac.nz/~mcw/Research/mvGF/asymultseq/index.html#software\
\>", "Text",
 CellChangeTimes->{{3.5542115372990313`*^9, 3.554211540499036*^9}, {
  3.554211575189084*^9, 3.554211581059092*^9}}],

Cell["\<\
Until research is done, just handle systems of equations that can be Solve\
\[CloseCurlyQuote]d.\
\>", "Text",
 CellChangeTimes->{{3.554217438940009*^9, 3.554217492685083*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["SymbolicMethod", "Section",
 CellChangeTimes->{{3.551545974884261*^9, 3.551545979548528*^9}, {
   3.5515468982610755`*^9, 3.5515469009402285`*^9}, {3.5515479708454237`*^9, 
   3.551547971284449*^9}, 3.5528423423479557`*^9}],

Cell[TextData[{
 "Specification: ",
 Cell[BoxData[
  RowBox[{"Spec", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"lhs", "\[Equal]", "rhs"}], ",", "..."}], "}"}], ",", 
    RowBox[{"labeled", "?"}]}], "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 "\n\tthe left hand sides are symbols representing classes, the right hand \
sides are expressions built with constructions, specification classes, and \
atomic and neutral classes\nLabeled constructions: sum, product, seq, cycle, \
set, pointing, substitution\n\t",
 Cell[BoxData[
  RowBox[{
  "SMPlus", ",", " ", "SMTimes", ",", " ", "SMSeq", ",", " ", "SMCyc", ",", 
   " ", "SMSet", ",", " ", "SMPointing", ",", " ", "SMSub"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 "\nUnlabeled constructions: sum, product, seq, cycle, multiset, pointing, \
substitution\n\t",
 Cell[BoxData[
  RowBox[{
  "SMPlus", ",", " ", "SMTimes", ",", " ", "SMSeq", ",", " ", "SMCyc", ",", 
   " ", "SMSet", ",", " ", "SMMultiset", ",", " ", "SMPointing", ",", " ", 
   "SMSub"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 "\n\nSyntax for ",
 Cell[BoxData["SMPointing"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 ": ",
 Cell[BoxData[
  RowBox[{"SMPointing", "[", 
   RowBox[{"class", ",", "paramNumber"}], "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 "\nSyntax for ",
 Cell[BoxData["SMSub"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 ": ",
 Cell[BoxData[
  RowBox[{"SMSub", "[", 
   RowBox[{"baseClass", ",", "substitutedClass", ",", "paramNumber"}], "]"}]],
   "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 "\n\nRestrictions: \n\tNumber of components in final \
set/multiset/sequence/cycle object\n\t\tOption for those heads: ",
 Cell[BoxData[
  RowBox[{"Cardinality", "\[Rule]", "predicateOnIntegers"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 "\n\tParameter values of final objects \n\t\t",
 Cell[BoxData[
  RowBox[{"Restricted", "[", 
   RowBox[{"class", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"atomicClassNum", "\[Rule]", "func"}], ",", "..."}], "}"}]}], 
   "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 ", where ",
 Cell[BoxData["func"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 " is a predicate on the integers specifying the allowed set of values for \
parameter ",
 Cell[BoxData["atomicClassNum"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 "\n\npredicates must by symbolic-friendly (not PrimeQ) -- like in \
GeneratingFunction\n\nAtomic class: ",
 Cell[BoxData[
  RowBox[{"ZClass", "[", "1", "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 ", Neutral class: ",
 Cell[BoxData["EClass"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 "\n\t\nAdditional params: \n\tadditional atomic classes\n\t\t",
 Cell[BoxData[
  RowBox[{
   RowBox[{"ZClass", "[", "2", "]"}], ",", " ", 
   RowBox[{"ZClass", "[", "3", "]"}], ",", "..."}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 "\n\t\tmarked by ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"indeterminate", "[", "2", "]"}], ",", 
   RowBox[{"indeterminate", "[", "3", "]"}], ",", "..."}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 "\n\nTo GF eqns: ",
 Cell[BoxData[
  RowBox[{"GFEqns", "[", 
   RowBox[{
    RowBox[{"Spec", "[", "...", "]"}], ",", "indeterminate"}], "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}]
}], "Text",
 CellChangeTimes->{{3.5515457794760847`*^9, 3.5515458571565275`*^9}, {
   3.551546902852338*^9, 3.5515469252686205`*^9}, {3.5516131787254806`*^9, 
   3.551613179397519*^9}, {3.552224559778845*^9, 3.552224637826309*^9}, {
   3.5522246710662103`*^9, 3.552224709106386*^9}, {3.5522247791343913`*^9, 
   3.552224859369981*^9}, {3.5534440175834484`*^9, 3.553444115090026*^9}, {
   3.553444652545766*^9, 3.5534446984113894`*^9}, {3.5534448659029694`*^9, 
   3.553444902249048*^9}, {3.553444949010723*^9, 3.553444962683505*^9}, {
   3.553445293062402*^9, 3.553445316930767*^9}, {3.553445540179536*^9, 
   3.5534455521072183`*^9}, {3.553445627234515*^9, 3.5534457040139065`*^9}, {
   3.5534477987897215`*^9, 3.5534478261072836`*^9}, {3.5534491736703596`*^9, 
   3.5534491798387127`*^9}, {3.5534493329184685`*^9, 
   3.5534493654373283`*^9}, {3.5534495502048965`*^9, 3.553449579732585*^9}, {
   3.5534497541935635`*^9, 3.5534497671183033`*^9}, {3.5534500866935816`*^9, 
   3.5534501410776925`*^9}, {3.5534505251346593`*^9, 
   3.5534505287248645`*^9}, {3.553451601023196*^9, 3.553451613693921*^9}, {
   3.5534567165267863`*^9, 3.5534567253902936`*^9}, {3.5534568936089153`*^9, 
   3.5534569048535585`*^9}, 3.5534570308817663`*^9, {3.5534573382773485`*^9, 
   3.5534573527881784`*^9}, {3.5534573843769855`*^9, 
   3.5534573846930037`*^9}, {3.55345748306663*^9, 3.5534574870618587`*^9}, {
   3.553457776469412*^9, 3.553457784349862*^9}, {3.553458191464148*^9, 
   3.5534581919411755`*^9}, {3.553458836512043*^9, 3.553458838335147*^9}, {
   3.5534597798910007`*^9, 3.553459878462639*^9}, {3.5534637403215246`*^9, 
   3.5534637531822605`*^9}, {3.553536960525258*^9, 3.553536974051032*^9}, 
   3.5540443959681444`*^9, {3.5540578999455276`*^9, 3.5540579007605743`*^9}, {
   3.5540597383146763`*^9, 3.5540597383146763`*^9}, {3.5540660960753193`*^9, 
   3.5540660973863945`*^9}, {3.554068344158902*^9, 3.554068355953577*^9}, 
   3.554068518164855*^9, {3.554145214226117*^9, 3.554145362252157*^9}, {
   3.5541454069224415`*^9, 3.5541454656178293`*^9}, {3.554146439880935*^9, 
   3.5541464450709424`*^9}, {3.554201702293515*^9, 3.554201715583534*^9}, {
   3.5542038788138204`*^9, 3.5542038889888344`*^9}, {3.554210607836749*^9, 
   3.554210618736764*^9}, 3.554210800622015*^9, {3.554210955762229*^9, 
   3.554210957862232*^9}, 3.5542111755535326`*^9}],

Cell["Todo: packagize", "Text",
 CellChangeTimes->{{3.554211187608549*^9, 3.5542111906335535`*^9}}],

Cell[TextData[{
 Cell[BoxData["ToGenfunlibSpec"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 "\n\ttakes Combstruct grammar as a String and whether it\[CloseCurlyQuote]s \
labeled and returns spec\n\tfor use with ",
 ButtonBox["http://algo.inria.fr/ecs/",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://algo.inria.fr/ecs/"], None},
  ButtonNote->"http://algo.inria.fr/ecs/"],
 "\n\tconverts upper case symbols to doubled lower case symbols"
}], "Text",
 CellChangeTimes->{{3.554220017514442*^9, 3.554220026299454*^9}, {
  3.5542220996353207`*^9, 3.5542221896754456`*^9}, {3.554222333930644*^9, 
  3.5542223458206606`*^9}, {3.554222380955709*^9, 3.5542223979257326`*^9}, {
  3.554222430125777*^9, 3.5542224421957936`*^9}}],

Cell["\<\
Bonus: implicit specs
Bonus: attribute grammars
\t\tref:[Mishna]
Bonus: semantic spec validity testing, a.k.a. checking for well definedness \
of a spec\
\>", "Text",
 CellChangeTimes->{{3.5515457794760847`*^9, 3.5515458571565275`*^9}, {
   3.551546902852338*^9, 3.5515469252686205`*^9}, {3.5516131787254806`*^9, 
   3.551613179397519*^9}, {3.552224559778845*^9, 3.552224637826309*^9}, {
   3.5522246710662103`*^9, 3.552224709106386*^9}, {3.5522247791343913`*^9, 
   3.552224859369981*^9}, {3.5534440175834484`*^9, 3.553444115090026*^9}, {
   3.553444652545766*^9, 3.5534446984113894`*^9}, {3.5534448659029694`*^9, 
   3.553444902249048*^9}, {3.553444949010723*^9, 3.553444962683505*^9}, {
   3.553445293062402*^9, 3.553445316930767*^9}, {3.553445540179536*^9, 
   3.5534455521072183`*^9}, {3.553445627234515*^9, 3.5534457040139065`*^9}, {
   3.5534477987897215`*^9, 3.5534478261072836`*^9}, {3.5534491736703596`*^9, 
   3.5534491798387127`*^9}, {3.5534493329184685`*^9, 
   3.5534493654373283`*^9}, {3.5534495502048965`*^9, 3.553449579732585*^9}, {
   3.5534497541935635`*^9, 3.5534497671183033`*^9}, {3.5534500866935816`*^9, 
   3.5534501410776925`*^9}, {3.5534505251346593`*^9, 
   3.5534505287248645`*^9}, {3.553451601023196*^9, 3.553451613693921*^9}, {
   3.5534567165267863`*^9, 3.5534567253902936`*^9}, {3.5534568936089153`*^9, 
   3.5534569048535585`*^9}, 3.5534570308817663`*^9, {3.5534573382773485`*^9, 
   3.5534573527881784`*^9}, {3.5534573843769855`*^9, 
   3.5534573846930037`*^9}, {3.55345748306663*^9, 3.5534574870618587`*^9}, {
   3.553457776469412*^9, 3.553457784349862*^9}, {3.553458191464148*^9, 
   3.5534581919411755`*^9}, {3.553458836512043*^9, 3.553458838335147*^9}, {
   3.5534597798910007`*^9, 3.553459878462639*^9}, {3.5534637403215246`*^9, 
   3.5534637531822605`*^9}, {3.553536960525258*^9, 3.553536974051032*^9}, 
   3.5540443959681444`*^9, {3.5540578999455276`*^9, 3.5540579007605743`*^9}, {
   3.5540597383146763`*^9, 3.5540597383146763`*^9}, {3.5540660960753193`*^9, 
   3.5540660973863945`*^9}, {3.554068344158902*^9, 3.554068355953577*^9}, 
   3.554068518164855*^9, {3.554145214226117*^9, 3.554145362252157*^9}, {
   3.5541454069224415`*^9, 3.5541454656178293`*^9}, {3.554146439880935*^9, 
   3.5541464450709424`*^9}, {3.554201702293515*^9, 3.554201715583534*^9}, {
   3.5542038788138204`*^9, 3.5542038889888344`*^9}, {3.554210607836749*^9, 
   3.554210618736764*^9}, 3.554210800622015*^9, {3.554210955762229*^9, 
   3.554210957862232*^9}, {3.5542111755535326`*^9, 3.554211178953537*^9}, {
   3.554292095368885*^9, 3.5542921159839134`*^9}}],

Cell[TextData[{
 "Areas for ",
 Cell[BoxData["restrictedSum"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}}],
 " improvement:"
}], "Text",
 CellChangeTimes->{{3.5542108646921034`*^9, 3.55421089841215*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"#", "\[LessEqual]", "a"}], "&&", 
   RowBox[{"#", "\[GreaterEqual]", "b"}]}], "&"}]], "Code",
 CellChangeTimes->{{3.5542120321297145`*^9, 3.5542120408447266`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["RegularLanguages", "Section",
 CellChangeTimes->{{3.5515457794760847`*^9, 3.551545811340907*^9}, 
   3.5515458660810385`*^9, {3.551547962348938*^9, 3.551547966300164*^9}, 
   3.552842201715912*^9}],

Cell["\<\
This subpackage allows regular languages to be represented by any of the \
following regular language representations (RLRs): NFA, DFA, regular \
expression, right regular grammar, or directed graph with labeled vertices.  \
Any RLR can be converted to any other.  The following operations on RLRs are \
supported: union, intersection, complement, reverse, concatenation, star.  \
Generating functions for regular expressions can be computed by specifying a \
weight/marker for each letter in the alphabet.  \
\>", "Text",
 CellChangeTimes->{{3.5525124233321333`*^9, 3.55251263447521*^9}, {
  3.552843434461421*^9, 3.5528434489482493`*^9}}],

Cell[TextData[{
 "Re messages, from the Guidebook: \[OpenCurlyDoubleQuote]As a rule of thumb, \
messages are not generated for \"symbolic\" input if the function they appear \
in is used in classical mathematics. A scalar product is used in classical \
mathematics, so no message was produced in the last case. A table (a list) is \
not, so ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " produced a message.\[CloseCurlyDoubleQuote]\n-The FiniteFields package \
largely doesn\[CloseCurlyQuote]t do input validation.  It sometimes performs \
weakish syntactic validity checks, sometimes performs total semantic validity \
checks and sometimes sends error messages (on failure all checks result in an \
expression returning unevaluated).\n-The Splines package does only weak \
syntactic input validation.\n-",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " built-in downvalues validate ",
 StyleBox["any",
  FontWeight->"Bold"],
 " sequence of arguments and send messages on errors."
}], "Text",
 CellChangeTimes->{{3.552495785462796*^9, 3.5524958000428166`*^9}, {
  3.5525113222611556`*^9, 3.552511412077293*^9}, {3.552511797764353*^9, 
  3.552511818419534*^9}, {3.55251304078745*^9, 3.5525130973956876`*^9}}],

Cell[TextData[{
 "How to do efficient and simple input validation remains a mystery.  The \
result of a successful RegUnion command, for example, is guaranteed to be \
valid RLR, but when it\[CloseCurlyQuote]s passed to another function, it\
\[CloseCurlyQuote]s checked for validity anyway.  One option is for all \
functions to store the validity of their results right before they return \
them, by setting a downvalue of the \[OpenCurlyDoubleQuote]validate\
\[CloseCurlyDoubleQuote] symbol (validate[ret] = True; ret).  This system \
could be altered by making the validate symbol only remember the last ",
 StyleBox["n ",
  FontSlant->"Italic"],
 "such expressions.  A somewhat-relevant reference is ",
 ButtonBox["this",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://mathematica.stackexchange.com/questions/588/function-that-\
caches-when-it-returns-unevaluated"], None},
  ButtonNote->
   "http://mathematica.stackexchange.com/questions/588/function-that-caches-\
when-it-returns-unevaluated"],
 "."
}], "Text",
 CellChangeTimes->{{3.552653125045941*^9, 3.5526531957739863`*^9}, {
  3.5526532328461065`*^9, 3.552653383333714*^9}, {3.5526535120700774`*^9, 
  3.552653513326149*^9}, {3.5526535707894363`*^9, 3.5526535895595093`*^9}, {
  3.553371332948965*^9, 3.553371350853989*^9}}],

Cell["\<\
If a public function calls another public function, it always passes valid \
input.  One way to avoid unnecessary computation of the validity is to pass \
an option saying \[OpenCurlyDoubleQuote]validation not required\
\[CloseCurlyDoubleQuote]; another is for public functions never to call \
public functions.\
\>", "Text",
 CellChangeTimes->{{3.552653399453636*^9, 3.5526534758370047`*^9}, 
   3.5526535241017656`*^9}],

Cell[TextData[{
 "Currect validation scheme: Public downvalues call validation directly \
(right in their definition) unless told not to by the validationRequired \
option; private downvalues don\[CloseCurlyQuote]t do validation.  Using \
validationRequired saves some computation at the expense of more complicated \
code.\nData representations like DFA[_, _, _, _, _] don\[CloseCurlyQuote]t do \
validation themselves, like RegularExpression and Graph in ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " built-in rules."
}], "Text",
 CellChangeTimes->{{3.5524212800648794`*^9, 3.5524213268645563`*^9}, {
   3.552422255232656*^9, 3.5524222590728755`*^9}, {3.5524223200163617`*^9, 
   3.5524223860641394`*^9}, 3.552426236521373*^9, {3.552426288352337*^9, 
   3.552426312616725*^9}, {3.5525161837332163`*^9, 3.5525162419805474`*^9}, {
   3.552578524570137*^9, 3.552578526162228*^9}, {3.5526538626861315`*^9, 
   3.552653891205763*^9}}],

Cell["\<\
Validity-checking rules that return more information than True/False (i.e. \
return conditions) can have their extra info captured in a Module variable \
like this:\
\>", "Text",
 CellChangeTimes->{{3.554216372962538*^9, 3.5542164586176558`*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"f", "[", "]"}], ":=", 
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"valid", ",", 
       RowBox[{"b", "=", "3"}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"(", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Print", "[", "valid", "]"}], ";"}], "\[IndentingNewLine]", 
       ")"}], "/;", 
      RowBox[{"(", 
       RowBox[{"valid", "=", 
        RowBox[{"validity", "[", "b", "]"}]}], ")"}]}]}], 
    "\[IndentingNewLine]", "]"}]}], ";"}]], "Code",
 CellChangeTimes->{{3.554216339177491*^9, 3.554216363887525*^9}, {
  3.554216407602586*^9, 3.5542164131425934`*^9}}],

Cell[TextData[{
 "The authors of ",
 StyleBox["Combinatorica",
  FontSlant->"Italic"],
 " say, \[OpenCurlyDoubleQuote]Our aim in introducting permutation groups \
into Combinatorica is primarily for solving combinatorial enumeration \
problems. We make no attempt to efficiently represent permutation groups or \
to solve many of the standard computational problems in group theory.\
\[CloseCurlyDoubleQuote]  The situation for this package and automata/grammar \
algorithm performance is similar."
}], "Text",
 CellChangeTimes->{{3.5523846670140123`*^9, 3.5523846833989496`*^9}, {
  3.5523892337672157`*^9, 3.5523892721594114`*^9}}],

Cell[TextData[{
 "Letters are represented by nonempty ",
 Cell[BoxData["String"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 "s, words are represented by ",
 Cell[BoxData["List"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 "s of letters."
}], "Text",
 CellChangeTimes->{{3.5522215561380463`*^9, 3.5522216118582335`*^9}, 
   3.552221877634435*^9}],

Cell[TextData[{
 "An alternative approach to providing RL functionality would have been to \
make a ",
 StyleBox["J/Link",
  FontSlant->"Italic"],
 " interface to ",
 ButtonBox["brics",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.brics.dk/automaton/"], None},
  ButtonNote->"http://www.brics.dk/automaton/"],
 "."
}], "Text",
 CellChangeTimes->{{3.554031983168173*^9, 3.5540320205343103`*^9}}],

Cell[CellGroupData[{

Cell["Public (Exported) Symbols with Downvalues", "Subsection",
 CellChangeTimes->{{3.5515457794760847`*^9, 3.551545811340907*^9}, {
   3.5515458660810385`*^9, 3.5515458775886965`*^9}, {3.551546993428519*^9, 
   3.551546993871544*^9}, {3.551547416117695*^9, 3.5515474289494295`*^9}, {
   3.5515475796130466`*^9, 3.5515475801040745`*^9}, {3.551547917998401*^9, 
   3.551547953383425*^9}, {3.551548014973948*^9, 3.55154802060927*^9}, {
   3.5515481879658422`*^9, 3.551548218900612*^9}, {3.551548359518655*^9, 
   3.5515483626868362`*^9}, {3.551552167990487*^9, 3.5515521790951223`*^9}, {
   3.551552235165329*^9, 3.551552328708679*^9}, {3.5515524485795355`*^9, 
   3.5515524560109606`*^9}, {3.551556307043227*^9, 3.551556400891595*^9}, {
   3.5515565716393614`*^9, 3.5515565840930734`*^9}, {3.5515566282235975`*^9, 
   3.5515566525269876`*^9}, {3.55155683247328*^9, 3.551556845133004*^9}, {
   3.551556953471201*^9, 3.5515569660209184`*^9}, {3.5515570932191935`*^9, 
   3.5515571031407614`*^9}, {3.551557218629367*^9, 3.551557225572764*^9}, {
   3.551557511792135*^9, 3.5515575384296584`*^9}, {3.5515576372453103`*^9, 
   3.551557681788858*^9}, {3.55155772762648*^9, 3.5515577299406123`*^9}, {
   3.551558129770481*^9, 3.551558152796798*^9}, {3.551558213213254*^9, 
   3.5515582600209312`*^9}, {3.551558425152376*^9, 3.55155842540039*^9}, {
   3.551559139560238*^9, 3.5515591489727764`*^9}, {3.551559204042926*^9, 
   3.551559261669222*^9}, {3.5515593175904207`*^9, 3.5515593177654305`*^9}, {
   3.551559352734431*^9, 3.5515593745006757`*^9}, {3.55155945937653*^9, 
   3.551559469581114*^9}, {3.551559637485718*^9, 3.5515596386057816`*^9}, {
   3.5515598855319047`*^9, 3.551559890950215*^9}, {3.551612818462875*^9, 
   3.5516128259733047`*^9}, {3.5516128701418304`*^9, 
   3.5516128830535693`*^9}, {3.551613261515216*^9, 3.5516132724518414`*^9}, {
   3.551715480745299*^9, 3.551715492617978*^9}, {3.5517382014418483`*^9, 
   3.551738220460936*^9}, {3.5518184881808376`*^9, 3.5518185238408866`*^9}, {
   3.551953653994302*^9, 3.5519536596206236`*^9}, {3.5519579358361025`*^9, 
   3.5519579826817822`*^9}, {3.5519580216530113`*^9, 3.551958040672099*^9}, {
   3.5519582726353664`*^9, 3.5519583106595416`*^9}, {3.5519583482916937`*^9, 
   3.5519583606434*^9}, {3.5519584295553417`*^9, 3.5519585177393856`*^9}, {
   3.5519586718892026`*^9, 3.5519586807877116`*^9}, {3.551958903448447*^9, 
   3.5519589120959415`*^9}, 3.551958959141632*^9, {3.5519590925742645`*^9, 
   3.5519590934123125`*^9}, {3.551959154664816*^9, 3.551959161571211*^9}, {
   3.55195923813159*^9, 3.5519592388836327`*^9}, {3.5519595516605225`*^9, 
   3.5519596222835617`*^9}, {3.551959917908471*^9, 3.55195992069163*^9}, {
   3.5519617062217565`*^9, 3.5519617976699867`*^9}, {3.5519619394700975`*^9, 
   3.5519619562440567`*^9}, {3.55196399434863*^9, 3.5519639946756487`*^9}, {
   3.5519864985230675`*^9, 3.5519865393704033`*^9}, 3.551986599386836*^9, {
   3.551994151492792*^9, 3.551994172947019*^9}, {3.5520449909305687`*^9, 
   3.552045002517231*^9}, {3.552045036464173*^9, 3.552045063924743*^9}, {
   3.5520451138616*^9, 3.552045114996664*^9}, {3.5520451478085413`*^9, 
   3.5520452793780665`*^9}, {3.5520453615087643`*^9, 3.552045364420931*^9}, {
   3.552045399495937*^9, 3.5520454004319906`*^9}, {3.5520455582460165`*^9, 
   3.5520455593580804`*^9}, {3.5520456072868223`*^9, 
   3.5520456244128017`*^9}, {3.5520459202537227`*^9, 
   3.5520459320923996`*^9}, {3.552066662798128*^9, 3.5520666740617723`*^9}, {
   3.552076390328511*^9, 3.552076419694191*^9}, {3.552076465573815*^9, 
   3.5520764667178802`*^9}, {3.552076626790036*^9, 3.552076700942277*^9}, {
   3.5520767455588293`*^9, 3.552076799662924*^9}, {3.552076982487381*^9, 
   3.5520769842794833`*^9}, {3.552077022727682*^9, 3.552077022727682*^9}, {
   3.552124428102063*^9, 3.5521244546985846`*^9}, {3.552124487266447*^9, 
   3.552124589876316*^9}, {3.552125711231454*^9, 3.5521257263563194`*^9}, {
   3.5521258560007343`*^9, 3.552125998042859*^9}, {3.552126242106818*^9, 
   3.552126294794832*^9}, {3.5521263267546597`*^9, 3.5521263364982176`*^9}, {
   3.5521265191866665`*^9, 3.5521265218428183`*^9}, {3.552126585322449*^9, 
   3.552126677380715*^9}, {3.5521267151688757`*^9, 3.552126730434749*^9}, {
   3.5521267649147215`*^9, 3.552126855154883*^9}, {3.552126934625428*^9, 
   3.552126946674117*^9}, {3.552127045021743*^9, 3.552127055898365*^9}, {
   3.552127096674697*^9, 3.552127231438405*^9}, {3.552127287610618*^9, 
   3.5521272946430197`*^9}, {3.5521274926703463`*^9, 
   3.5521275028429284`*^9}, {3.552127701147271*^9, 3.5521277052685065`*^9}, {
   3.552127841335289*^9, 3.5521278413362894`*^9}, {3.552128110227669*^9, 
   3.552128111426738*^9}, {3.552128442618681*^9, 3.5521284438187494`*^9}, {
   3.552129598024766*^9, 3.5521296000478816`*^9}, {3.5521296346788626`*^9, 
   3.5521297549007387`*^9}, {3.5521299579713535`*^9, 3.552129958723397*^9}, {
   3.552130047787491*^9, 3.552130055370925*^9}, {3.5521301821631765`*^9, 
   3.552130311349566*^9}, {3.552130347626641*^9, 3.5521303591462994`*^9}, {
   3.5521305136281357`*^9, 3.552130520787545*^9}, {3.552130634897072*^9, 
   3.5521306365741673`*^9}, {3.552130801515602*^9, 3.5521308029626846`*^9}, {
   3.5521308398187923`*^9, 3.5521308505844083`*^9}, {3.5521309993499174`*^9, 
   3.552131104276919*^9}, {3.552131247461108*^9, 3.552131281107033*^9}, {
   3.5521313111807528`*^9, 3.5521313977867064`*^9}, {3.5521321557880616`*^9, 
   3.5521321566671124`*^9}, {3.552132328295929*^9, 3.552132333467224*^9}, {
   3.5521325430992146`*^9, 3.5521325471394453`*^9}, {3.55213264511605*^9, 
   3.552132645523073*^9}, {3.552133343428991*^9, 3.5521333581308317`*^9}, {
   3.5521334301569514`*^9, 3.552133550860855*^9}, {3.5521335883760014`*^9, 
   3.5521335899310904`*^9}, 3.552133640928007*^9, {3.5521340683234525`*^9, 
   3.552134076013892*^9}, {3.5521341295319533`*^9, 3.552134151579214*^9}, {
   3.5521366965317774`*^9, 3.5521367392912235`*^9}, {3.5521367825316963`*^9, 
   3.55213680077774*^9}, {3.55213980060532*^9, 3.552139837069406*^9}, {
   3.5521405984839563`*^9, 3.5521406516909995`*^9}, {3.552154643371278*^9, 
   3.552154644836362*^9}, {3.552155753877795*^9, 3.5521560877078896`*^9}, {
   3.5521562350953193`*^9, 3.552156325932515*^9}, {3.5521566000841956`*^9, 
   3.5521568849344883`*^9}, {3.5522215440653563`*^9, 3.552221548599615*^9}, {
   3.5522216374186954`*^9, 3.5522218179800234`*^9}, {3.552221900661752*^9, 
   3.5522220336983614`*^9}, {3.5522224548984528`*^9, 3.552222492770619*^9}, {
   3.5522226498706045`*^9, 3.5522226498706045`*^9}, {3.5522228078496404`*^9, 
   3.552222865929962*^9}, {3.5522231909305515`*^9, 3.5522232038182883`*^9}, {
   3.5522244621182594`*^9, 3.5522244633863316`*^9}, {3.552224914203117*^9, 
   3.552224922386585*^9}, {3.552224976547683*^9, 3.5522249768326993`*^9}, {
   3.5522250425394573`*^9, 3.5522250508419323`*^9}, 3.5522251003747654`*^9, {
   3.5523270178113728`*^9, 3.5523270219866114`*^9}}],

Cell["Conversions", "Text",
 CellChangeTimes->{{3.552512364019741*^9, 3.5525123652758126`*^9}}],

Cell[TextData[{
 Cell[BoxData["ToNFA"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 "\n\tfrom ",
 Cell[BoxData["DFA"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": via Regex\n\tfrom ",
 Cell[BoxData["Regex"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 "\n\t\tuses nfa *, concat, union\n\tfrom ",
 Cell[BoxData["RRGrammar"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": direct\n\tfrom ",
 Cell[BoxData["Digraph"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": direct\n\t\tLineGraph construction\n\n",
 Cell[BoxData["ToDFA"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 "\n\tfrom ",
 Cell[BoxData["NFA"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": powerset construction, minimize\n\t\tTodo: too slow\n\t\tRemove states \
from which no end state is accessible, from NFA\n\t\tCreate only elements of \
the powerset that are possible \n\t\tOptimize code\n\t\t\n\tfrom ",
 Cell[BoxData["Regex"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": via NFA\n\tfrom ",
 Cell[BoxData["RRGrammar"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": via NFA\n\tfrom ",
 Cell[BoxData["Digraph"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": via NFA\n\n ",
 Cell[BoxData["ToRegex"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 "\n\tfrom ",
 Cell[BoxData["NFA"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": via DFA\n\tfrom ",
 Cell[BoxData["DFA"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": state elimination algorithm\n\tfrom ",
 Cell[BoxData["RRGrammar"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": via DFA\n\tfrom ",
 Cell[BoxData["Digraph"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": via DFA\n\n",
 Cell[BoxData["ToRRGrammar"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 "\n\tfrom ",
 Cell[BoxData["NFA"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": direct\n\tfrom ",
 Cell[BoxData["DFA"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": via NFA\n\tfrom ",
 Cell[BoxData["Regex"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": via NFA\n\tfrom ",
 Cell[BoxData["Digraph"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": via NFA\n\n ",
 Cell[BoxData["ToDigraph"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 "\n\tfrom ",
 Cell[BoxData["NFA"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": via DFA\n\tfrom ",
 Cell[BoxData["DFA"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": direct\n\t\tLineGraph construction\n\tfrom ",
 Cell[BoxData["Regex"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": via DFA\n\tfrom ",
 Cell[BoxData["RRGrammar"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ": via DFA\n\nRegex <-> RegularExpression conversion:\n",
 Cell[BoxData[
  RowBox[{"ToRegex", "[", 
   RowBox[{"RegularExpress", "[", "...", "]"}], "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}}],
 "\n",
 Cell[BoxData[
  RowBox[{"ToRegularExpression", "[", 
   RowBox[{"Regex", "[", "...", "]"}], "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}}],
 "\n\tusage string for RegularExpression is joined to built-in one\n\n\
Operations\n\nThe following take one of ",
 Cell[BoxData[
  RowBox[{
  "DFA", ",", " ", "NFA", ",", " ", "Regex", ",", " ", "RRGrammar", ",", " ", 
   "Digraph"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}}],
 "\n",
 Cell[BoxData["RegStar"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}}],
 "\n\tvia NFA\n",
 Cell[BoxData["RegComplement"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}}],
 "\n\tvia DFA\n\ttakes alphabet as second parameter\n\tequals ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["alphabet", "*"], TraditionalForm]]],
 " \\ L(dfa)\n",
 Cell[BoxData["RegReverse"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}}],
 "\n\tvia Regex\n\nThe following take two (of the same kind) of ",
 Cell[BoxData[
  RowBox[{
  "DFA", ",", " ", "NFA", ",", " ", "Regex", ",", " ", "RRGrammar", ",", " ", 
   "Digraph"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}}],
 "\n",
 Cell[BoxData["RegUnion"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}}],
 "\n\tvia NFA\n",
 Cell[BoxData["RegConcat"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}}],
 "\n\tvia NFA\n",
 Cell[BoxData["RegIntersection"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}}],
 "\n\tvia DFA\nTodo: replace RegStar, RegUnion, RegConcat with grammar \
versions from contextFree.m, then delete contextFree.m\n\nGFs\n\n",
 Cell[BoxData[
  RowBox[{"GeneratingFunction", "[", 
   RowBox[{"regex", ",", " ", "rules"}], "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}, {3.5515479302621026`*^9, 
    3.5515479373255067`*^9}}],
 "\n\tallow the user to provide a function mapping each letter to a \
symbol/\"weight\" in the form of Rules\n\tTodo: SE: Can disambiguation be \
done in subexponential time?\n\nBonus\n\t\n",
 Cell[BoxData["Disambiguate"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}, {3.5515479302621026`*^9, 
    3.5515479373255067`*^9}, {3.551552114077403*^9, 3.551552118709668*^9}}],
 "\n\ttakes ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"Regex", ",", "RRGrammar", ",", "Digraph"}], "}"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}, {3.5515479302621026`*^9, 
    3.5515479373255067`*^9}, {3.551552114077403*^9, 3.551552118709668*^9}}],
 "\n\tDigraph disambiguation is converting to a DFA and back\n",
 Cell[BoxData["AmbiguousQ"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}, {3.5515479302621026`*^9, 
    3.5515479373255067`*^9}, {3.551552114077403*^9, 3.551552118709668*^9}}],
 "\n\ttakes ",
 Cell[BoxData[
  RowBox[{"{", 
   RowBox[{"Regex", ",", 
    RowBox[{"RRGrammar", "?"}], ",", 
    RowBox[{"NFA", "?"}], ",", "Digraph"}], "}"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}, {
    3.5515474012058425`*^9, 3.5515474106853848`*^9}, {3.5515475376946487`*^9, 
    3.5515475726696496`*^9}, {3.5515479302621026`*^9, 
    3.5515479373255067`*^9}, {3.551552114077403*^9, 3.551552118709668*^9}}],
 "\n\task on SE for \"?\" cases\n\tambiguity test via NFA test (see Book and \
Even papers -- is Book necessary, would ordinary construction work?) or \
recursive test (see Brabrand and Thomsen)\n\t\[OpenCurlyDoubleQuote]a**\
\[CloseCurlyDoubleQuote] is not considered ambiguous in Book, niether is \
\[OpenCurlyDoubleQuote]a* | b*\[CloseCurlyDoubleQuote].  ",
 StyleBox["our",
  FontSlant->"Italic"],
 " definition of ambiguity must include ",
 StyleBox["e",
  FontSlant->"Italic"],
 "."
}], "Text",
 CellChangeTimes->{{3.5515457794760847`*^9, 3.551545811340907*^9}, {
   3.5515458660810385`*^9, 3.5515458775886965`*^9}, {3.551546993428519*^9, 
   3.551546993871544*^9}, {3.551547416117695*^9, 3.5515474289494295`*^9}, {
   3.5515475796130466`*^9, 3.5515475801040745`*^9}, {3.551547917998401*^9, 
   3.551547953383425*^9}, {3.551548014973948*^9, 3.55154802060927*^9}, {
   3.5515481879658422`*^9, 3.551548218900612*^9}, {3.551548359518655*^9, 
   3.5515483626868362`*^9}, {3.551552167990487*^9, 3.5515521790951223`*^9}, {
   3.551552235165329*^9, 3.551552328708679*^9}, {3.5515524485795355`*^9, 
   3.5515524560109606`*^9}, {3.551556307043227*^9, 3.551556400891595*^9}, {
   3.5515565716393614`*^9, 3.5515565840930734`*^9}, {3.5515566282235975`*^9, 
   3.5515566525269876`*^9}, {3.55155683247328*^9, 3.551556845133004*^9}, {
   3.551556953471201*^9, 3.5515569660209184`*^9}, {3.5515570932191935`*^9, 
   3.5515571031407614`*^9}, {3.551557218629367*^9, 3.551557225572764*^9}, {
   3.551557511792135*^9, 3.5515575384296584`*^9}, {3.5515576372453103`*^9, 
   3.551557681788858*^9}, {3.55155772762648*^9, 3.5515577299406123`*^9}, {
   3.551558129770481*^9, 3.551558152796798*^9}, {3.551558213213254*^9, 
   3.5515582600209312`*^9}, {3.551558425152376*^9, 3.55155842540039*^9}, {
   3.551559139560238*^9, 3.5515591489727764`*^9}, {3.551559204042926*^9, 
   3.551559261669222*^9}, {3.5515593175904207`*^9, 3.5515593177654305`*^9}, {
   3.551559352734431*^9, 3.5515593745006757`*^9}, {3.55155945937653*^9, 
   3.551559469581114*^9}, {3.551559637485718*^9, 3.5515596386057816`*^9}, {
   3.5515598855319047`*^9, 3.551559890950215*^9}, {3.551612818462875*^9, 
   3.5516128259733047`*^9}, {3.5516128701418304`*^9, 
   3.5516128830535693`*^9}, {3.551613261515216*^9, 3.5516132724518414`*^9}, {
   3.551715480745299*^9, 3.551715492617978*^9}, {3.5517382014418483`*^9, 
   3.551738220460936*^9}, {3.5518184881808376`*^9, 3.5518185238408866`*^9}, {
   3.551953653994302*^9, 3.5519536596206236`*^9}, {3.5519579358361025`*^9, 
   3.5519579826817822`*^9}, {3.5519580216530113`*^9, 3.551958040672099*^9}, {
   3.5519582726353664`*^9, 3.5519583106595416`*^9}, {3.5519583482916937`*^9, 
   3.5519583606434*^9}, {3.5519584295553417`*^9, 3.5519585177393856`*^9}, {
   3.5519586718892026`*^9, 3.5519586807877116`*^9}, {3.551958903448447*^9, 
   3.5519589120959415`*^9}, 3.551958959141632*^9, {3.5519590925742645`*^9, 
   3.5519590934123125`*^9}, {3.551959154664816*^9, 3.551959161571211*^9}, {
   3.55195923813159*^9, 3.5519592388836327`*^9}, {3.5519595516605225`*^9, 
   3.5519596222835617`*^9}, {3.551959917908471*^9, 3.55195992069163*^9}, {
   3.5519617062217565`*^9, 3.5519617976699867`*^9}, {3.5519619394700975`*^9, 
   3.5519619562440567`*^9}, {3.55196399434863*^9, 3.5519639946756487`*^9}, {
   3.5519864985230675`*^9, 3.5519865393704033`*^9}, 3.551986599386836*^9, {
   3.551994151492792*^9, 3.551994172947019*^9}, {3.5520449909305687`*^9, 
   3.552045002517231*^9}, {3.552045036464173*^9, 3.552045063924743*^9}, {
   3.5520451138616*^9, 3.552045114996664*^9}, {3.5520451478085413`*^9, 
   3.5520452793780665`*^9}, {3.5520453615087643`*^9, 3.552045364420931*^9}, {
   3.552045399495937*^9, 3.5520454004319906`*^9}, {3.5520455582460165`*^9, 
   3.5520455593580804`*^9}, {3.5520456072868223`*^9, 
   3.5520456244128017`*^9}, {3.5520459202537227`*^9, 
   3.5520459320923996`*^9}, {3.552066662798128*^9, 3.5520666740617723`*^9}, {
   3.552076390328511*^9, 3.552076419694191*^9}, {3.552076465573815*^9, 
   3.5520764667178802`*^9}, {3.552076626790036*^9, 3.552076700942277*^9}, {
   3.5520767455588293`*^9, 3.552076799662924*^9}, {3.552076982487381*^9, 
   3.5520769842794833`*^9}, {3.552077022727682*^9, 3.552077022727682*^9}, {
   3.552124428102063*^9, 3.5521244546985846`*^9}, {3.552124487266447*^9, 
   3.552124589876316*^9}, {3.552125711231454*^9, 3.5521257263563194`*^9}, {
   3.5521258560007343`*^9, 3.552125998042859*^9}, {3.552126242106818*^9, 
   3.552126294794832*^9}, {3.5521263267546597`*^9, 3.5521263364982176`*^9}, {
   3.5521265191866665`*^9, 3.5521265218428183`*^9}, {3.552126585322449*^9, 
   3.552126677380715*^9}, {3.5521267151688757`*^9, 3.552126730434749*^9}, {
   3.5521267649147215`*^9, 3.552126855154883*^9}, {3.552126934625428*^9, 
   3.552126946674117*^9}, {3.552127045021743*^9, 3.552127055898365*^9}, {
   3.552127096674697*^9, 3.552127231438405*^9}, {3.552127287610618*^9, 
   3.5521272946430197`*^9}, {3.5521274926703463`*^9, 
   3.5521275028429284`*^9}, {3.552127701147271*^9, 3.5521277052685065`*^9}, {
   3.552127841335289*^9, 3.5521278413362894`*^9}, {3.552128110227669*^9, 
   3.552128111426738*^9}, {3.552128442618681*^9, 3.5521284438187494`*^9}, {
   3.552129598024766*^9, 3.5521296000478816`*^9}, {3.5521296346788626`*^9, 
   3.5521297549007387`*^9}, {3.5521299579713535`*^9, 3.552129958723397*^9}, {
   3.552130047787491*^9, 3.552130055370925*^9}, {3.5521301821631765`*^9, 
   3.552130311349566*^9}, {3.552130347626641*^9, 3.5521303591462994`*^9}, {
   3.5521305136281357`*^9, 3.552130520787545*^9}, {3.552130634897072*^9, 
   3.5521306365741673`*^9}, {3.552130801515602*^9, 3.5521308029626846`*^9}, {
   3.5521308398187923`*^9, 3.5521308505844083`*^9}, {3.5521309993499174`*^9, 
   3.552131104276919*^9}, {3.552131247461108*^9, 3.552131281107033*^9}, {
   3.5521313111807528`*^9, 3.5521313977867064`*^9}, {3.5521321557880616`*^9, 
   3.5521321566671124`*^9}, {3.552132328295929*^9, 3.552132333467224*^9}, {
   3.5521325430992146`*^9, 3.5521325471394453`*^9}, {3.55213264511605*^9, 
   3.552132645523073*^9}, {3.552133343428991*^9, 3.5521333581308317`*^9}, {
   3.5521334301569514`*^9, 3.552133550860855*^9}, {3.5521335883760014`*^9, 
   3.5521335899310904`*^9}, 3.552133640928007*^9, {3.5521340683234525`*^9, 
   3.552134076013892*^9}, {3.5521341295319533`*^9, 3.552134151579214*^9}, {
   3.5521366965317774`*^9, 3.5521367392912235`*^9}, {3.5521367825316963`*^9, 
   3.55213680077774*^9}, {3.55213980060532*^9, 3.552139837069406*^9}, {
   3.5521405984839563`*^9, 3.5521406516909995`*^9}, {3.552154643371278*^9, 
   3.552154644836362*^9}, {3.552155753877795*^9, 3.5521560877078896`*^9}, {
   3.5521562350953193`*^9, 3.552156325932515*^9}, {3.5521566000841956`*^9, 
   3.5521568849344883`*^9}, {3.5522215440653563`*^9, 3.552221548599615*^9}, {
   3.5522216374186954`*^9, 3.5522218179800234`*^9}, {3.552221900661752*^9, 
   3.5522220336983614`*^9}, {3.5522224548984528`*^9, 3.552222492770619*^9}, {
   3.5522226498706045`*^9, 3.5522226498706045`*^9}, {3.5522228078496404`*^9, 
   3.552222865929962*^9}, {3.5522231909305515`*^9, 3.5522232038182883`*^9}, {
   3.5522244621182594`*^9, 3.5522244633863316`*^9}, {3.552224914203117*^9, 
   3.552224922386585*^9}, {3.552224976547683*^9, 3.5522249768326993`*^9}, {
   3.5522250425394573`*^9, 3.5522250508419323`*^9}, {3.5522251003747654`*^9, 
   3.552225144505289*^9}, {3.552225400598937*^9, 3.5522254077863483`*^9}, {
   3.5522360267757196`*^9, 3.5522360298028927`*^9}, {3.5522361251713476`*^9, 
   3.552236162667492*^9}, {3.552236220799817*^9, 3.5522362305303736`*^9}, {
   3.552236398167962*^9, 3.5522364338430023`*^9}, {3.552236498728714*^9, 
   3.5522365157706885`*^9}, {3.552236561542307*^9, 3.5522365839705896`*^9}, {
   3.5522366864794526`*^9, 3.5522367090827456`*^9}, {3.552236793512574*^9, 
   3.55223683505095*^9}, {3.552236932760539*^9, 3.5522369340266113`*^9}, {
   3.552236982711396*^9, 3.5522370029145517`*^9}, {3.55223708348516*^9, 
   3.5522370987950354`*^9}, {3.552237227632405*^9, 3.552237231506626*^9}, {
   3.5522373626531277`*^9, 3.552237363971203*^9}, {3.552237742702865*^9, 
   3.552237767243269*^9}, {3.552238441326824*^9, 3.552238447931202*^9}, 
   3.552328388314761*^9, {3.552410535711502*^9, 3.5524108395468807`*^9}, {
   3.5524108889447064`*^9, 3.552410967109177*^9}, {3.5524126606178694`*^9, 
   3.5524126617549343`*^9}, {3.5524127070595255`*^9, 
   3.5524127076555595`*^9}, {3.552412791907378*^9, 3.552412795320574*^9}, {
   3.552412856375066*^9, 3.5524129382497487`*^9}, {3.5524129985781994`*^9, 
   3.5524130089997954`*^9}, {3.5524132138485117`*^9, 3.55241323584877*^9}, {
   3.552413589552001*^9, 3.552413594656293*^9}, {3.5524157725958643`*^9, 
   3.5524157730258884`*^9}, {3.5525123713751616`*^9, 3.552512385195952*^9}, {
   3.5525149241911745`*^9, 3.552514925420244*^9}, 3.5525149822474947`*^9, {
   3.5525809646237125`*^9, 3.5525809847278624`*^9}, {3.552654411106499*^9, 
   3.552654418441919*^9}, {3.5526821258036895`*^9, 3.552682159111594*^9}, {
   3.552683477533004*^9, 3.5526835017913914`*^9}, {3.5527346906273737`*^9, 
   3.5527347118015847`*^9}, {3.552741706652667*^9, 3.5527417190013733`*^9}, {
   3.552758286944006*^9, 3.5527582879750648`*^9}, {3.5527745829920864`*^9, 
   3.5527745902425013`*^9}, {3.5529136048670015`*^9, 
   3.5529136345757008`*^9}, {3.553860958271558*^9, 3.553860972456369*^9}, {
   3.5538612511703105`*^9, 3.5538612855442767`*^9}, {3.5538697164804983`*^9, 
   3.5538697277981462`*^9}, {3.5538850778871207`*^9, 
   3.5538850826553936`*^9}, {3.5540322153764544`*^9, 3.554032231579381*^9}, {
   3.5540444902905393`*^9, 3.5540444917696238`*^9}, {3.554071120901723*^9, 
   3.5540711438740373`*^9}, {3.5540711766819134`*^9, 3.554071227241805*^9}, {
   3.5541132897469597`*^9, 3.5541133362246184`*^9}, {3.554142365145862*^9, 
   3.554142396080905*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell["Representation Descriptions", "Subsection",
 CellChangeTimes->{{3.5515457794760847`*^9, 3.551545811340907*^9}, {
   3.5515458660810385`*^9, 3.5515458775886965`*^9}, {3.551546993428519*^9, 
   3.551546993871544*^9}, {3.551547416117695*^9, 3.5515474289494295`*^9}, {
   3.5515475796130466`*^9, 3.5515475801040745`*^9}, {3.551547917998401*^9, 
   3.551547953383425*^9}, {3.551548014973948*^9, 3.55154802060927*^9}, {
   3.5515481879658422`*^9, 3.551548218900612*^9}, {3.551548359518655*^9, 
   3.5515483626868362`*^9}, {3.551552167990487*^9, 3.5515521790951223`*^9}, {
   3.551552235165329*^9, 3.551552328708679*^9}, {3.5515524485795355`*^9, 
   3.5515524560109606`*^9}, {3.551556307043227*^9, 3.551556400891595*^9}, {
   3.5515565716393614`*^9, 3.5515565840930734`*^9}, {3.5515566282235975`*^9, 
   3.5515566525269876`*^9}, {3.55155683247328*^9, 3.551556845133004*^9}, {
   3.551556953471201*^9, 3.5515569660209184`*^9}, {3.5515570932191935`*^9, 
   3.5515571031407614`*^9}, {3.551557218629367*^9, 3.551557225572764*^9}, {
   3.551557511792135*^9, 3.5515575384296584`*^9}, {3.5515576372453103`*^9, 
   3.551557681788858*^9}, {3.55155772762648*^9, 3.5515577299406123`*^9}, {
   3.551558129770481*^9, 3.551558152796798*^9}, {3.551558213213254*^9, 
   3.5515582600209312`*^9}, {3.551558425152376*^9, 3.55155842540039*^9}, {
   3.551559139560238*^9, 3.5515591489727764`*^9}, {3.551559204042926*^9, 
   3.551559261669222*^9}, {3.5515593175904207`*^9, 3.5515593177654305`*^9}, {
   3.551559352734431*^9, 3.5515593745006757`*^9}, {3.55155945937653*^9, 
   3.551559469581114*^9}, {3.551559637485718*^9, 3.5515596386057816`*^9}, {
   3.5515598855319047`*^9, 3.551559890950215*^9}, {3.551612818462875*^9, 
   3.5516128259733047`*^9}, {3.5516128701418304`*^9, 
   3.5516128830535693`*^9}, {3.551613261515216*^9, 3.5516132724518414`*^9}, {
   3.551715480745299*^9, 3.551715492617978*^9}, {3.5517382014418483`*^9, 
   3.551738220460936*^9}, {3.5518184881808376`*^9, 3.5518185238408866`*^9}, {
   3.551953653994302*^9, 3.5519536596206236`*^9}, {3.5519579358361025`*^9, 
   3.5519579826817822`*^9}, {3.5519580216530113`*^9, 3.551958040672099*^9}, {
   3.5519582726353664`*^9, 3.5519583106595416`*^9}, {3.5519583482916937`*^9, 
   3.5519583606434*^9}, {3.5519584295553417`*^9, 3.5519585177393856`*^9}, {
   3.5519586718892026`*^9, 3.5519586807877116`*^9}, {3.551958903448447*^9, 
   3.5519589120959415`*^9}, 3.551958959141632*^9, {3.5519590925742645`*^9, 
   3.5519590934123125`*^9}, {3.551959154664816*^9, 3.551959161571211*^9}, {
   3.55195923813159*^9, 3.5519592388836327`*^9}, {3.5519595516605225`*^9, 
   3.5519596222835617`*^9}, {3.551959917908471*^9, 3.55195992069163*^9}, {
   3.5519617062217565`*^9, 3.5519617976699867`*^9}, {3.5519619394700975`*^9, 
   3.5519619562440567`*^9}, {3.55196399434863*^9, 3.5519639946756487`*^9}, {
   3.5519864985230675`*^9, 3.5519865393704033`*^9}, 3.551986599386836*^9, {
   3.551994151492792*^9, 3.551994172947019*^9}, {3.5520449909305687`*^9, 
   3.552045002517231*^9}, {3.552045036464173*^9, 3.552045063924743*^9}, {
   3.5520451138616*^9, 3.552045114996664*^9}, {3.5520451478085413`*^9, 
   3.5520452793780665`*^9}, {3.5520453615087643`*^9, 3.552045364420931*^9}, {
   3.552045399495937*^9, 3.5520454004319906`*^9}, {3.5520455582460165`*^9, 
   3.5520455593580804`*^9}, {3.5520456072868223`*^9, 
   3.5520456244128017`*^9}, {3.5520459202537227`*^9, 
   3.5520459320923996`*^9}, {3.552066662798128*^9, 3.5520666740617723`*^9}, {
   3.552076390328511*^9, 3.552076419694191*^9}, {3.552076465573815*^9, 
   3.5520764667178802`*^9}, {3.552076626790036*^9, 3.552076700942277*^9}, {
   3.5520767455588293`*^9, 3.552076799662924*^9}, {3.552076982487381*^9, 
   3.5520769842794833`*^9}, {3.552077022727682*^9, 3.552077022727682*^9}, {
   3.552124428102063*^9, 3.5521244546985846`*^9}, {3.552124487266447*^9, 
   3.552124589876316*^9}, {3.552125711231454*^9, 3.5521257263563194`*^9}, {
   3.5521258560007343`*^9, 3.552125998042859*^9}, {3.552126242106818*^9, 
   3.552126294794832*^9}, {3.5521263267546597`*^9, 3.5521263364982176`*^9}, {
   3.5521265191866665`*^9, 3.5521265218428183`*^9}, {3.552126585322449*^9, 
   3.552126677380715*^9}, {3.5521267151688757`*^9, 3.552126730434749*^9}, {
   3.5521267649147215`*^9, 3.552126855154883*^9}, {3.552126934625428*^9, 
   3.552126946674117*^9}, {3.552127045021743*^9, 3.552127055898365*^9}, {
   3.552127096674697*^9, 3.552127231438405*^9}, {3.552127287610618*^9, 
   3.5521272946430197`*^9}, {3.5521274926703463`*^9, 
   3.5521275028429284`*^9}, {3.552127701147271*^9, 3.5521277052685065`*^9}, {
   3.552127841335289*^9, 3.5521278413362894`*^9}, {3.552128110227669*^9, 
   3.552128111426738*^9}, {3.552128442618681*^9, 3.5521284438187494`*^9}, {
   3.552129598024766*^9, 3.5521296000478816`*^9}, {3.5521296346788626`*^9, 
   3.5521297549007387`*^9}, {3.5521299579713535`*^9, 3.552129958723397*^9}, {
   3.552130047787491*^9, 3.552130055370925*^9}, {3.5521301821631765`*^9, 
   3.552130311349566*^9}, {3.552130347626641*^9, 3.5521303591462994`*^9}, {
   3.5521305136281357`*^9, 3.552130520787545*^9}, {3.552130634897072*^9, 
   3.5521306365741673`*^9}, {3.552130801515602*^9, 3.5521308029626846`*^9}, {
   3.5521308398187923`*^9, 3.5521308505844083`*^9}, {3.5521309993499174`*^9, 
   3.552131104276919*^9}, {3.552131247461108*^9, 3.552131281107033*^9}, {
   3.5521313111807528`*^9, 3.5521313977867064`*^9}, {3.5521321557880616`*^9, 
   3.5521321566671124`*^9}, {3.552132328295929*^9, 3.552132333467224*^9}, {
   3.5521325430992146`*^9, 3.5521325471394453`*^9}, {3.55213264511605*^9, 
   3.552132645523073*^9}, {3.552133343428991*^9, 3.5521333581308317`*^9}, {
   3.5521334301569514`*^9, 3.552133550860855*^9}, {3.5521335883760014`*^9, 
   3.5521335899310904`*^9}, 3.552133640928007*^9, {3.5521340683234525`*^9, 
   3.552134076013892*^9}, {3.5521341295319533`*^9, 3.552134151579214*^9}, {
   3.5521366965317774`*^9, 3.5521367392912235`*^9}, {3.5521367825316963`*^9, 
   3.55213680077774*^9}, {3.55213980060532*^9, 3.552139837069406*^9}, {
   3.5521405984839563`*^9, 3.5521406516909995`*^9}, {3.552154643371278*^9, 
   3.552154644836362*^9}, {3.552155753877795*^9, 3.5521560877078896`*^9}, {
   3.5521562350953193`*^9, 3.552156325932515*^9}, {3.5521566000841956`*^9, 
   3.5521568849344883`*^9}, {3.5522215440653563`*^9, 3.552221548599615*^9}, {
   3.5522216374186954`*^9, 3.5522218179800234`*^9}, {3.552221900661752*^9, 
   3.5522220336983614`*^9}, {3.5522224548984528`*^9, 3.552222492770619*^9}, {
   3.5522226498706045`*^9, 3.5522226498706045`*^9}, {3.5522228078496404`*^9, 
   3.552222865929962*^9}, {3.5522231909305515`*^9, 3.5522232038182883`*^9}, {
   3.5522244621182594`*^9, 3.5522244633863316`*^9}, {3.552224914203117*^9, 
   3.552224922386585*^9}, {3.552224976547683*^9, 3.5522249768326993`*^9}, {
   3.5522250425394573`*^9, 3.5522250508419323`*^9}, {3.5522251003747654`*^9, 
   3.5522251459943743`*^9}}],

Cell[TextData[{
 StyleBox["NFA",
  FontWeight->"Bold"],
 "\n\t",
 Cell[BoxData[
  RowBox[{"NFA", "[", 
   RowBox[{
   "numStates_Integer", ",", " ", "alphabet_", ",", " ", "transitionMatrix_", 
    ",", " ", "\n", " ", 
    RowBox[{"acceptStates_", "?", "VectorQ"}], ",", " ", "initialState_"}], 
   "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 "\n\tnumber of states: integer >=0, where 0 states means null language\n\t\
alphabet: ",
 StyleBox["sorted",
  FontColor->GrayLevel[0.5]],
 " list of distinct strings, not containing \"\". A value of ",
 Cell[BoxData[
  RowBox[{"{", "}"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 " means the empty language or ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", "\[Epsilon]", "}"}], TraditionalForm]]],
 ".\n\ttransition matrix: numStates by alphabet size+1 matrix where entry i,j \
is a list of (valid) states accessible from state i and letter j = \
alphabet[j]. The (alphabet size+1) \[OpenCurlyDoubleQuote]letter\
\[CloseCurlyDoubleQuote] is \[Epsilon].\n\t\tif numStates = 0, \
transitionMatrix = {}\n\t\tif alphabet = {}, transitionMatrix has one column \
(if there are any rows)\n\taccept states: list of integers between 1 and \
number of states\n\tinitial state: integer between 1 and number of states, or \
Null iff numStates = 0\n\n",
 StyleBox["DFA",
  FontWeight->"Bold"],
 "\n\t",
 Cell[BoxData[
  RowBox[{"DFA", "[", 
   RowBox[{
   "numStates_Integer", ",", " ", "alphabet_", ",", " ", "transitionMatrix_", 
    ",", " ", "\n", " ", 
    RowBox[{"acceptStates_", "?", "VectorQ"}], ",", " ", "initialState_"}], 
   "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 "\n\tnumber of states: integer >=0, where 0 states means null language\n\t\
alphabet: ",
 StyleBox["sorted",
  FontColor->GrayLevel[0.5]],
 " list of distinct strings, not containing \"\". A value of ",
 Cell[BoxData[
  RowBox[{"{", "}"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 " means the empty language or ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", "\[Epsilon]", "}"}], TraditionalForm]]],
 ".\n\ttransition matrix: numStates by alphabet size matrix where entry i,j \
is the (valid) state accessible from state i and letter j. \n\t\tif numStates \
= 0, transitionMatrix = {}\n\t\tif alphabet = {}, transitionMatrix = {{}, {}, \
...}\n\taccept states: list of integers between 1 and number of states\n\t\
initial state: integer between 1 and number of states or Null if numStates = \
0\n\n",
 StyleBox["String Regular Expression",
  FontWeight->"Bold"],
 "\n\tstring, with wrapping head ",
 Cell[BoxData["RegularExpression"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ", containing [a-z,A-Z,0-9,*,(,),|,] and is a valid ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " regular expression (POSIX ERE I think)\n\tEmpty string accepts just \
\[Epsilon]\n\t",
 Cell[BoxData[
  RowBox[{"RegularExpression", "[", "Null", "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 " for empty language\n\n",
 StyleBox["Symbolic Regular Expression",
  FontWeight->"Bold"],
 "\n\texpression with head ",
 Cell[BoxData["Regex"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 " built up from nonempty strings, ",
 Cell[BoxData["EmptyWord"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 " and ",
 Cell[BoxData[
  RowBox[{"RegexStar", ",", "RegexConcat", ",", "RegexOr"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 "\n\t",
 Cell[BoxData[
  RowBox[{"Regex", "[", "Null", "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 " is empty language\n\tsee ",
 Cell[BoxData["simplifyRawRegex"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 " for more info\n\n",
 StyleBox["Right Regular Grammar",
  FontWeight->"Bold"],
 "\n\t",
 Cell[BoxData["RRGrammar"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 "-wrapped list of rules in the form ",
 Cell[BoxData[
  RowBox[{"sym_Symbol", " ", "\[Rule]", " ", "RHS"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 " or ",
 Cell[BoxData[
  RowBox[{
   RowBox[{"sym_Symbol", "[", "n_Integer", "]"}], " ", "\[Rule]", " ", 
   "RHS"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ",\n\twhere ",
 Cell[BoxData["RHS"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 " is either ",
 Cell[BoxData["EmptyWord"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ", a string, ",
 Cell[BoxData["sym_Symbol"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ", where ",
 Cell[BoxData["sym"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 " is ",
 StyleBox["in a LHS",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 ", ",
 Cell[BoxData[
  RowBox[{"sym_Symbol", "[", "n_Integer", "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ", where ",
 Cell[BoxData[
  RowBox[{"sym", "[", "n", "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 " is ",
 StyleBox["in a LHS",
  FontWeight->"Bold",
  FontVariations->{"Underline"->True}],
 ", ",
 Cell[BoxData[
  RowBox[{"RRGrammarConcat", "[", 
   RowBox[{"str_String", ",", " ", "sym_Symbol"}], "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ", ",
 Cell[BoxData[
  RowBox[{"RRGrammarConcat", "[", 
   RowBox[{"str_String", ",", " ", 
    RowBox[{"sym_Symbol", "[", "n_Integer", "]"}]}], "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ", or ",
 Cell[BoxData[
  RowBox[{"RRGrammarOr", "[", "args__", "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 ", where ",
 Cell[BoxData["args"], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 " is a sequence of those things. Strings cannot be empty.\n\tAn empty list \
corresponds to the null language.\n\tTodo: the phrases underlined and bold \
are not uniformly ahered to\n\n",
 StyleBox["Digraph",
  FontWeight->"Bold"],
 "\n\t",
 Cell[BoxData[
  RowBox[{"Digraph", "[", 
   RowBox[{
   "graph_", ",", " ", "startVertices_", ",", " ", "endVertices_", ",", " ", 
    "eAccepted_"}], "]"}]], "Code",
  CellChangeTimes->{
   3.5515469211423845`*^9, {3.5515469566214137`*^9, 3.5515469847730236`*^9}}],
 "\n\tgraph: a directed graph, with vertices labeled with nonempty strings\n\t\
startVertices: list of vertices of graph; if empty: null languge (\[Epsilon] \
may still be accepted). empty list means empty language (\[Epsilon] may still \
be accepted)\n\tendVertices: list of vertices of graph; if empty: null \
language (\[Epsilon] may still be accepted). empty list means empty language \
(\[Epsilon] may still be accepted)\n\teAccepted: True if \[Epsilon] is \
accepted, False otherwise\n\tGraph with 0 vertices means empty language (\
\[Epsilon] may still be accepted).\n\n\nBonus: words with occurrences of \
patterns\nBonus: accept more regex syntax\nBonus: extended symbolic regexes \
with symbolic parameters (\[OpenCurlyDoubleQuote]a\[CloseCurlyDoubleQuote] ",
 Cell[BoxData[
  FormBox["k", TraditionalForm]]],
 " times, etc.)\n\t",
 ButtonBox["SE question",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://cs.stackexchange.com/questions/3112/how-to-disambiguate-\
symbolic-regular-expressions"], None},
  ButtonNote->
   "http://cs.stackexchange.com/questions/3112/how-to-disambiguate-symbolic-\
regular-expressions"]
}], "Text",
 CellChangeTimes->{{3.5515457794760847`*^9, 3.551545811340907*^9}, {
   3.5515458660810385`*^9, 3.5515458775886965`*^9}, {3.551546993428519*^9, 
   3.551546993871544*^9}, {3.551547416117695*^9, 3.5515474289494295`*^9}, {
   3.5515475796130466`*^9, 3.5515475801040745`*^9}, {3.551547917998401*^9, 
   3.551547953383425*^9}, {3.551548014973948*^9, 3.55154802060927*^9}, {
   3.5515481879658422`*^9, 3.551548218900612*^9}, {3.551548359518655*^9, 
   3.5515483626868362`*^9}, {3.551552167990487*^9, 3.5515521790951223`*^9}, {
   3.551552235165329*^9, 3.551552328708679*^9}, {3.5515524485795355`*^9, 
   3.5515524560109606`*^9}, {3.551556307043227*^9, 3.551556400891595*^9}, {
   3.5515565716393614`*^9, 3.5515565840930734`*^9}, {3.5515566282235975`*^9, 
   3.5515566525269876`*^9}, {3.55155683247328*^9, 3.551556845133004*^9}, {
   3.551556953471201*^9, 3.5515569660209184`*^9}, {3.5515570932191935`*^9, 
   3.5515571031407614`*^9}, {3.551557218629367*^9, 3.551557225572764*^9}, {
   3.551557511792135*^9, 3.5515575384296584`*^9}, {3.5515576372453103`*^9, 
   3.551557681788858*^9}, {3.55155772762648*^9, 3.5515577299406123`*^9}, {
   3.551558129770481*^9, 3.551558152796798*^9}, {3.551558213213254*^9, 
   3.5515582600209312`*^9}, {3.551558425152376*^9, 3.55155842540039*^9}, {
   3.551559139560238*^9, 3.5515591489727764`*^9}, {3.551559204042926*^9, 
   3.551559261669222*^9}, {3.5515593175904207`*^9, 3.5515593177654305`*^9}, {
   3.551559352734431*^9, 3.5515593745006757`*^9}, {3.55155945937653*^9, 
   3.551559469581114*^9}, {3.551559637485718*^9, 3.5515596386057816`*^9}, {
   3.5515598855319047`*^9, 3.551559890950215*^9}, {3.551612818462875*^9, 
   3.5516128259733047`*^9}, {3.5516128701418304`*^9, 
   3.5516128830535693`*^9}, {3.551613261515216*^9, 3.5516132724518414`*^9}, {
   3.551715480745299*^9, 3.551715492617978*^9}, {3.5517382014418483`*^9, 
   3.551738220460936*^9}, {3.5518184881808376`*^9, 3.5518185238408866`*^9}, {
   3.551953653994302*^9, 3.5519536596206236`*^9}, {3.5519579358361025`*^9, 
   3.5519579826817822`*^9}, {3.5519580216530113`*^9, 3.551958040672099*^9}, {
   3.5519582726353664`*^9, 3.5519583106595416`*^9}, {3.5519583482916937`*^9, 
   3.5519583606434*^9}, {3.5519584295553417`*^9, 3.5519585177393856`*^9}, {
   3.5519586718892026`*^9, 3.5519586807877116`*^9}, {3.551958903448447*^9, 
   3.5519589120959415`*^9}, 3.551958959141632*^9, {3.5519590925742645`*^9, 
   3.5519590934123125`*^9}, {3.551959154664816*^9, 3.551959161571211*^9}, {
   3.55195923813159*^9, 3.5519592388836327`*^9}, {3.5519595516605225`*^9, 
   3.5519596222835617`*^9}, {3.551959917908471*^9, 3.55195992069163*^9}, {
   3.5519617062217565`*^9, 3.5519617976699867`*^9}, {3.5519619394700975`*^9, 
   3.5519619562440567`*^9}, {3.55196399434863*^9, 3.5519639946756487`*^9}, {
   3.5519864985230675`*^9, 3.5519865393704033`*^9}, 3.551986599386836*^9, {
   3.551994151492792*^9, 3.551994172947019*^9}, {3.5520449909305687`*^9, 
   3.552045002517231*^9}, {3.552045036464173*^9, 3.552045063924743*^9}, {
   3.5520451138616*^9, 3.552045114996664*^9}, {3.5520451478085413`*^9, 
   3.5520452793780665`*^9}, {3.5520453615087643`*^9, 3.552045364420931*^9}, {
   3.552045399495937*^9, 3.5520454004319906`*^9}, {3.5520455582460165`*^9, 
   3.5520455593580804`*^9}, {3.5520456072868223`*^9, 
   3.5520456244128017`*^9}, {3.5520459202537227`*^9, 
   3.5520459320923996`*^9}, {3.552066662798128*^9, 3.5520666740617723`*^9}, {
   3.552076390328511*^9, 3.552076419694191*^9}, {3.552076465573815*^9, 
   3.5520764667178802`*^9}, {3.552076626790036*^9, 3.552076700942277*^9}, {
   3.5520767455588293`*^9, 3.552076799662924*^9}, {3.552076982487381*^9, 
   3.5520769842794833`*^9}, {3.552077022727682*^9, 3.552077022727682*^9}, {
   3.552124428102063*^9, 3.5521244546985846`*^9}, {3.552124487266447*^9, 
   3.552124589876316*^9}, {3.552125711231454*^9, 3.5521257263563194`*^9}, {
   3.5521258560007343`*^9, 3.552125998042859*^9}, {3.552126242106818*^9, 
   3.552126294794832*^9}, {3.5521263267546597`*^9, 3.5521263364982176`*^9}, {
   3.5521265191866665`*^9, 3.5521265218428183`*^9}, {3.552126585322449*^9, 
   3.552126677380715*^9}, {3.5521267151688757`*^9, 3.552126730434749*^9}, {
   3.5521267649147215`*^9, 3.552126855154883*^9}, {3.552126934625428*^9, 
   3.552126946674117*^9}, {3.552127045021743*^9, 3.552127055898365*^9}, {
   3.552127096674697*^9, 3.552127231438405*^9}, {3.552127287610618*^9, 
   3.5521272946430197`*^9}, {3.5521274926703463`*^9, 
   3.5521275028429284`*^9}, {3.552127701147271*^9, 3.5521277052685065`*^9}, {
   3.552127841335289*^9, 3.5521278413362894`*^9}, {3.552128110227669*^9, 
   3.552128111426738*^9}, {3.552128442618681*^9, 3.5521284438187494`*^9}, {
   3.552129598024766*^9, 3.5521296000478816`*^9}, {3.5521296346788626`*^9, 
   3.5521297549007387`*^9}, {3.5521299579713535`*^9, 3.552129958723397*^9}, {
   3.552130047787491*^9, 3.552130055370925*^9}, {3.5521301821631765`*^9, 
   3.552130311349566*^9}, {3.552130347626641*^9, 3.5521303591462994`*^9}, {
   3.5521305136281357`*^9, 3.552130520787545*^9}, {3.552130634897072*^9, 
   3.5521306365741673`*^9}, {3.552130801515602*^9, 3.5521308029626846`*^9}, {
   3.5521308398187923`*^9, 3.5521308505844083`*^9}, {3.5521309993499174`*^9, 
   3.552131104276919*^9}, {3.552131247461108*^9, 3.552131281107033*^9}, {
   3.5521313111807528`*^9, 3.5521313977867064`*^9}, {3.5521321557880616`*^9, 
   3.5521321566671124`*^9}, {3.552132328295929*^9, 3.552132333467224*^9}, {
   3.5521325430992146`*^9, 3.5521325471394453`*^9}, {3.55213264511605*^9, 
   3.552132645523073*^9}, {3.552133343428991*^9, 3.5521333581308317`*^9}, {
   3.5521334301569514`*^9, 3.552133550860855*^9}, {3.5521335883760014`*^9, 
   3.5521335899310904`*^9}, 3.552133640928007*^9, {3.5521340683234525`*^9, 
   3.552134076013892*^9}, {3.5521341295319533`*^9, 3.552134151579214*^9}, {
   3.5521366965317774`*^9, 3.5521367392912235`*^9}, {3.5521367825316963`*^9, 
   3.55213680077774*^9}, {3.55213980060532*^9, 3.552139837069406*^9}, {
   3.5521405984839563`*^9, 3.5521406516909995`*^9}, {3.552154643371278*^9, 
   3.552154644836362*^9}, {3.552155753877795*^9, 3.5521560877078896`*^9}, {
   3.5521562350953193`*^9, 3.552156325932515*^9}, {3.5521566000841956`*^9, 
   3.5521568849344883`*^9}, {3.5522215440653563`*^9, 3.552221548599615*^9}, {
   3.5522216374186954`*^9, 3.5522218179800234`*^9}, {3.552221900661752*^9, 
   3.5522220336983614`*^9}, {3.5522224548984528`*^9, 3.552222492770619*^9}, {
   3.5522226498706045`*^9, 3.5522226498706045`*^9}, {3.5522228078496404`*^9, 
   3.552222865929962*^9}, {3.5522231909305515`*^9, 3.5522232038182883`*^9}, {
   3.5522244621182594`*^9, 3.5522244633863316`*^9}, {3.552224914203117*^9, 
   3.552224922386585*^9}, {3.552224976547683*^9, 3.5522249768326993`*^9}, {
   3.5522250425394573`*^9, 3.5522250508419323`*^9}, {3.5522251003747654`*^9, 
   3.5522251334356565`*^9}, {3.5522545715224185`*^9, 3.552254587436329*^9}, {
   3.552306086289158*^9, 3.55230612688448*^9}, {3.5523061708639956`*^9, 
   3.5523061772573614`*^9}, {3.5523087981462674`*^9, 3.552308798690298*^9}, {
   3.5523127136802235`*^9, 3.5523127354494686`*^9}, {3.552312771200513*^9, 
   3.552312780521046*^9}, {3.552318458585813*^9, 3.5523184821941633`*^9}, {
   3.5523267225084825`*^9, 3.552326726890733*^9}, {3.552389517831463*^9, 
   3.5523895213106623`*^9}, {3.552412685754307*^9, 3.5524126864783487`*^9}, 
   3.552412770193136*^9, {3.5524128010839033`*^9, 3.552412803755056*^9}, {
   3.5524136116632657`*^9, 3.5524136139413958`*^9}, {3.552413689784734*^9, 
   3.5524137303110523`*^9}, {3.5524138088875465`*^9, 3.55241382293535*^9}, {
   3.5524142271574697`*^9, 3.5524142489357157`*^9}, {3.552414294084298*^9, 
   3.5524143565288696`*^9}, {3.552414880146819*^9, 3.5524149087604556`*^9}, {
   3.5524149690299025`*^9, 3.552414970097964*^9}, {3.5524150021737986`*^9, 
   3.5524150117203445`*^9}, {3.5526580198059053`*^9, 
   3.5526580376459255`*^9}, {3.5526586797256503`*^9, 3.552658688933177*^9}, {
   3.5526596105538907`*^9, 3.5526596106538963`*^9}, {3.5526727973871346`*^9, 
   3.5526728068866777`*^9}, {3.5526740683748307`*^9, 3.552674074559184*^9}, {
   3.5527576756030393`*^9, 3.552757688489776*^9}, {3.5529151251589575`*^9, 
   3.5529151645202084`*^9}, {3.553119001024057*^9, 3.5531190222452707`*^9}, {
   3.553542869072208*^9, 3.553542894394656*^9}}]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Util", "Section",
 CellChangeTimes->{{3.5542045444913244`*^9, 3.554204544916325*^9}}],

Cell["\<\
egf2ogf, ogf2egf
\tmethod: Laplace transform
\tcould also try manual method\
\>", "Text",
 CellChangeTimes->{{3.5542045534413366`*^9, 3.5542046014514027`*^9}}]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["rec2GFeq",
 FontColor->GrayLevel[0]]], "Section",
 CellChangeTimes->{{3.5513651493618345`*^9, 3.551365150017872*^9}, {
   3.551365265714489*^9, 3.5513652744419885`*^9}, {3.5513653460980873`*^9, 
   3.5513654380903482`*^9}, 3.551365629522298*^9, {3.551366071699589*^9, 
   3.551366099466177*^9}, {3.5513751086796083`*^9, 3.5513751995348053`*^9}, {
   3.551377237640378*^9, 3.551377270974285*^9}, {3.551378360486601*^9, 
   3.551378373167327*^9}, {3.5513786144471273`*^9, 3.551378614911154*^9}, {
   3.5513914777417297`*^9, 3.5513914933806243`*^9}, {3.551392339870041*^9, 
   3.5513923838365555`*^9}, {3.5514444953390074`*^9, 3.551444498383181*^9}, {
   3.551444823257763*^9, 3.551444823977804*^9}, {3.551444941322516*^9, 
   3.5514449448797197`*^9}, {3.5514451046598587`*^9, 3.551445107472019*^9}, {
   3.5514452094268503`*^9, 3.551445214824159*^9}, {3.551446403842167*^9, 
   3.551446411375598*^9}, {3.551527605234988*^9, 3.5515276097922487`*^9}, {
   3.551533841491681*^9, 3.5515338756736364`*^9}, {3.551545726846074*^9, 
   3.5515457278211303`*^9}, {3.551560086254386*^9, 3.551560086957426*^9}, {
   3.552064233390174*^9, 3.552064245629874*^9}, {3.5528421415224686`*^9, 
   3.552842177300515*^9}, 3.5535361830677905`*^9}],

Cell[TextData[{
 "see also ",
 ButtonBox["GeneratingFunctions",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.risc.jku.at/research/combinat/software/\
GeneratingFunctions/index.php"], None},
  ButtonNote->
   "http://www.risc.jku.at/research/combinat/software/GeneratingFunctions/\
index.php"]
}], "Text",
 CellChangeTimes->{{3.554302655924605*^9, 3.554302655924605*^9}}],

Cell[TextData[{
 StyleBox["\"override\" ",
  FontColor->GrayLevel[0]],
 Cell[BoxData["GeneratingFunction"], "Code",
  CellChangeTimes->{{3.5513660856753883`*^9, 3.5513660885625534`*^9}},
  FontColor->GrayLevel[0]],
 " "
}], "Text",
 CellChangeTimes->{{3.5513651493618345`*^9, 3.551365150017872*^9}, {
   3.551365265714489*^9, 3.5513652744419885`*^9}, {3.5513653460980873`*^9, 
   3.5513654380903482`*^9}, 3.551365629522298*^9, {3.551366071699589*^9, 
   3.551366099466177*^9}, {3.5513751086796083`*^9, 3.5513751995348053`*^9}, {
   3.551377237640378*^9, 3.551377270974285*^9}, {3.551378360486601*^9, 
   3.551378373167327*^9}, {3.5513786144471273`*^9, 3.551378614911154*^9}, {
   3.5513914777417297`*^9, 3.5513914933806243`*^9}, {3.551392339870041*^9, 
   3.5513923838365555`*^9}, {3.5514444953390074`*^9, 3.551444498383181*^9}, {
   3.551444823257763*^9, 3.551444823977804*^9}, {3.551444941322516*^9, 
   3.5514449448797197`*^9}, {3.5514451046598587`*^9, 3.551445107472019*^9}, {
   3.5514452094268503`*^9, 3.551445214824159*^9}, {3.551446403842167*^9, 
   3.551446411375598*^9}, {3.551527605234988*^9, 3.5515276097922487`*^9}, {
   3.551533841491681*^9, 3.5515338756736364`*^9}, {3.551545726846074*^9, 
   3.5515457278211303`*^9}, {3.551560086254386*^9, 3.551560086957426*^9}, {
   3.552064233390174*^9, 3.552064245629874*^9}, {3.5528421415224686`*^9, 
   3.552842183899893*^9}, {3.5529072513756027`*^9, 3.552907253375717*^9}, {
   3.552951260001752*^9, 3.552951260857801*^9}, 3.55302978881065*^9}],

Cell["Areas for improvement:", "Text",
 CellChangeTimes->{{3.552912375142665*^9, 3.552912378639865*^9}}],

Cell[BoxData[
 RowBox[{"GeneratingFunction", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["n", "k"], 
    RowBox[{"f", "[", "n", "]"}]}], ",", "n", ",", "x"}], "]"}]], "Code",
 CellChangeTimes->{3.552911269762441*^9}],

Cell[BoxData[
 RowBox[{"GeneratingFunction", "[", 
  RowBox[{
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"c", "[", "i", "]"}], "*", 
      RowBox[{"f", "[", "n", "]"}]}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", "0", ",", " ", "k"}], "}"}]}], "]"}], ",", " ", 
   "n", ",", " ", "x"}], "]"}]], "Code",
 CellChangeTimes->{{3.552912361329875*^9, 3.5529123899165106`*^9}}],

Cell[BoxData[
 RowBox[{"GeneratingFunction", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"n", "+", "i"}], "]"}], ",", "n", ",", "x"}], "]"}]], "Code",
 CellChangeTimes->{3.553193752094735*^9}],

Cell[BoxData[
 RowBox[{"GeneratingFunction", "[", 
  RowBox[{
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"n", "+", "i"}], "]"}], ",", " ", 
     RowBox[{"{", 
      RowBox[{"i", ",", " ", "0", ",", " ", "k"}], "}"}]}], "]"}], ",", " ", 
   "n", ",", " ", "x"}], "]"}]], "Code",
 CellChangeTimes->{3.552951306619418*^9}],

Cell[BoxData[
 RowBox[{"GeneratingFunction", "[", 
  RowBox[{
   RowBox[{
    FractionBox["1", 
     RowBox[{"n", "+", "1"}]], 
    RowBox[{"f", "[", "n", "]"}]}], ",", " ", "n", ",", " ", "x"}], 
  "]"}]], "Code",
 CellChangeTimes->{{3.552912361329875*^9, 3.5529123899165106`*^9}, {
  3.5529495807477045`*^9, 3.552949588180129*^9}}],

Cell[BoxData[
 RowBox[{"GeneratingFunction", "[", 
  RowBox[{
   RowBox[{"Boole", "[", 
    RowBox[{"Divisible", "[", 
     RowBox[{"n", ",", "2"}], "]"}], "]"}], ",", "n", ",", "x"}], 
  "]"}]], "Code",
 CellChangeTimes->{3.553029776676956*^9}],

Cell[BoxData[
 RowBox[{"GeneratingFunction", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Boole", "[", 
     RowBox[{
      RowBox[{"Mod", "[", 
       RowBox[{"n", ",", "2"}], "]"}], "\[Equal]", "0"}], "]"}], 
    RowBox[{"f", "[", "n", "]"}]}], ",", "n", ",", "x"}], "]"}]], "Code",
 CellChangeTimes->{3.5534660433672514`*^9}],

Cell[BoxData[
 RowBox[{"GeneratingFunction", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Boole", "[", 
     RowBox[{"n", "\[GreaterEqual]", "1"}], "]"}], 
    RowBox[{"f", "[", "n", "]"}]}], ",", "n", ",", "x"}], "]"}]], "Code",
 CellChangeTimes->{3.5531936911846514`*^9}],

Cell[BoxData[
 RowBox[{"GeneratingFunction", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"UnitStep", "[", 
     RowBox[{"n", "-", "k"}], "]"}], 
    RowBox[{"f", "[", "n", "]"}]}], ",", "n", ",", "x"}], "]"}]], "Code",
 CellChangeTimes->{3.5532861612029457`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell["GFeq2rec", "Section",
 CellChangeTimes->{{3.5513651493618345`*^9, 3.551365150017872*^9}, {
   3.551365265714489*^9, 3.5513652744419885`*^9}, {3.5513653460980873`*^9, 
   3.5513654380903482`*^9}, 3.551365629522298*^9, {3.551366071699589*^9, 
   3.551366099466177*^9}, {3.5513751086796083`*^9, 3.5513751995348053`*^9}, {
   3.551377237640378*^9, 3.551377270974285*^9}, {3.551378360486601*^9, 
   3.551378373167327*^9}, {3.5513786144471273`*^9, 3.551378614911154*^9}, {
   3.5513914777417297`*^9, 3.5513914933806243`*^9}, {3.551392339870041*^9, 
   3.5513923838365555`*^9}, {3.5514444953390074`*^9, 3.551444498383181*^9}, {
   3.551444823257763*^9, 3.551444823977804*^9}, {3.551444941322516*^9, 
   3.5514449448797197`*^9}, {3.5514451046598587`*^9, 3.551445107472019*^9}, {
   3.5514452094268503`*^9, 3.551445214824159*^9}, {3.551446403842167*^9, 
   3.551446411375598*^9}, {3.551527605234988*^9, 3.5515276097922487`*^9}, {
   3.551533841491681*^9, 3.5515338756736364`*^9}, {3.551545726846074*^9, 
   3.5515457278211303`*^9}, {3.551560086254386*^9, 3.551560086957426*^9}, {
   3.552064233390174*^9, 3.552064245629874*^9}, {3.5528421415224686`*^9, 
   3.5528421632177095`*^9}}],

Cell[TextData[{
 "see also ",
 Cell[BoxData[
  RowBox[{"SeriesCoefficient", "[", 
   RowBox[{"DifferentialRoot", "[", "lde", "]"}], "]"}]], "Code",
  CellChangeTimes->{3.554328907062997*^9}],
 ", ",
 Cell[BoxData[
  RowBox[{"SeriesCoefficient", "[", 
   RowBox[{"Root", "[", "ae", "]"}], "]"}]], "Code",
  CellChangeTimes->{3.554328907062997*^9}],
 " and ",
 ButtonBox["GeneratingFunctions",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["http://www.risc.jku.at/research/combinat/software/\
GeneratingFunctions/index.php"], None},
  ButtonNote->
   "http://www.risc.jku.at/research/combinat/software/GeneratingFunctions/\
index.php"]
}], "Text",
 CellChangeTimes->{{3.554302631534571*^9, 3.5543026510995984`*^9}, {
  3.554329050324191*^9, 3.554329072351451*^9}, {3.5543292192738543`*^9, 
  3.5543292289804096`*^9}, {3.554330079932081*^9, 3.554330090106663*^9}}],

Cell[TextData[{
 StyleBox["\[OpenCurlyDoubleQuote]override\[CloseCurlyDoubleQuote]",
  FontColor->GrayLevel[0]],
 " SeriesCoefficient"
}], "Text",
 CellChangeTimes->{{3.5529125602092505`*^9, 3.552912579712366*^9}, 
   3.552951250090185*^9}],

Cell[TextData[{
 "No way to represent ",
 Cell[BoxData[
  FormBox[
   RowBox[{"known", "(", 
    RowBox[{"unknown", "(", "z", ")"}], ")"}], TraditionalForm]]],
 " compositions (can\[CloseCurlyQuote]t do \[OpenCurlyDoubleQuote]symbolic \
lists\[CloseCurlyDoubleQuote])"
}], "Text",
 CellChangeTimes->{{3.5529512405686407`*^9, 3.5529512433938017`*^9}, {
  3.55311254266966*^9, 3.5531125880452557`*^9}}],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"unknown", "(", 
    RowBox[{
     RowBox[{"known", "(", "z", ")"}], ",", "..."}], ")"}], TraditionalForm]]],
 " compositions can only be done (for the same reason) for fixed expressions \
like ",
 Cell[BoxData[
  FormBox[
   RowBox[{"unknown", "(", 
    RowBox[{"k", " ", "z"}], ")"}], TraditionalForm]]],
 " or ",
 Cell[BoxData[
  FormBox[
   RowBox[{"unknown", "(", 
    RowBox[{
     RowBox[{"k", " ", "z"}], ",", 
     RowBox[{"j", " ", "z"}]}], ")"}], TraditionalForm]]]
}], "Text",
 CellChangeTimes->{{3.553119116084638*^9, 3.553119132821595*^9}, {
  3.5531929924936867`*^9, 3.55319306700879*^9}}],

Cell["\<\
ref/Series: \[OpenCurlyDoubleQuote]Series by default assumes symbolic \
functions to be analytic\[CloseCurlyDoubleQuote]\
\>", "Text",
 CellChangeTimes->{{3.5532989460031943`*^9, 3.5532989651312885`*^9}}],

Cell["\<\
For singular functions, SeriesCoefficient can do rational-power expansions.  \
In that case, the Cauchy product rule for series multiplication doesn\
\[CloseCurlyQuote]t hold.  To use a simplification rule for products of \
series, we have to determine whether the factors are analytic.  Doing that \
automatically would be an interesting challenge, however, for simplicity, we \
merely allow the user to specify when the factors should simply be assumed to \
be analytic.  But... built-in functions cannot have new options added.  \
\>", "Text",
 CellChangeTimes->{{3.5533420322840633`*^9, 3.553342036938329*^9}, {
  3.5533420928585277`*^9, 3.553342203374849*^9}, {3.5533702763335304`*^9, 
  3.5533703713489647`*^9}, {3.553370687438044*^9, 3.5533707133405256`*^9}}],

Cell["\<\
Also, negative-power expansions can be done, so sometimes that possibility \
should be ignored.\
\>", "Text",
 CellChangeTimes->{{3.553342408394575*^9, 3.553342423194422*^9}, {
  3.5533424953785505`*^9, 3.553342517690827*^9}, {3.5533712286690006`*^9, 
  3.553371234708346*^9}}],

Cell[TextData[{
 "Current system: global variable called ",
 Cell[BoxData["$FullAnalytic"], "Code",
  CellChangeTimes->{3.5515469211423845`*^9}],
 ", which, if true, means that the Cauchy product rule is assumed always \
applicable."
}], "Text",
 CellChangeTimes->{{3.553371238066538*^9, 3.553371248988163*^9}, {
  3.553371284182176*^9, 3.553371316237009*^9}}],

Cell["\<\
Todo: recurse over second-argument lists (MV support)\
\>", "Text",
 CellChangeTimes->{{3.55439932802317*^9, 3.554399387236557*^9}}],

Cell["Areas for improvement:", "Text",
 CellChangeTimes->{{3.5534243652924013`*^9, 3.5534243686355925`*^9}}],

Cell[BoxData[
 RowBox[{"SeriesCoefficient", "[", 
  RowBox[{
   RowBox[{"Sum", "[", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{
       RowBox[{"k", "[", "i", "]"}], "*", "x"}], "]"}], ",", 
     RowBox[{"{", 
      RowBox[{"i", ",", "1", ",", "m"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "n"}], "}"}]}], "]"}]], "Code",
 CellChangeTimes->{{3.5534243770520744`*^9, 3.553424409548933*^9}}]
}, Open  ]]
}, Open  ]]
},
WindowToolbars->"EditBar",
WindowSize->{1051, 822},
WindowMargins->{{-1067, Automatic}, {40, Automatic}},
PrintingCopies->1,
PrintingPageRange->{32000, 32000},
PrintingOptions->{"Magnification"->1.,
"PaperOrientation"->"Portrait",
"PaperSize"->{612, 792}},
DefaultNewCellStyle->"Text",
Magnification->1.4000000953674316`,
FrontEndVersion->"8.0 for Microsoft Windows (64-bit) (February 23, 2011)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[579, 22, 251, 5, 115, "Title"],
Cell[CellGroupData[{
Cell[855, 31, 104, 1, 98, "Section"],
Cell[962, 34, 727, 19, 201, "Text"],
Cell[1692, 55, 1905, 27, 62, "Text"],
Cell[3600, 84, 1523, 39, 108, "Text"],
Cell[5126, 125, 1014, 23, 85, "Text"],
Cell[6143, 150, 1607, 23, 38, "Text"],
Cell[7753, 175, 134, 1, 38, "Text"],
Cell[7890, 178, 153, 2, 38, "Text"],
Cell[8046, 182, 731, 10, 38, "Text"],
Cell[8780, 194, 225, 5, 38, "Text"],
Cell[9008, 201, 329, 6, 38, "Text"],
Cell[9340, 209, 197, 4, 38, "Text"],
Cell[9540, 215, 462, 9, 38, "Text"],
Cell[10005, 226, 272, 5, 38, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[10314, 236, 195, 3, 98, "Section"],
Cell[10512, 241, 589, 15, 38, "Text"],
Cell[11104, 258, 209, 4, 38, "Text"],
Cell[11316, 264, 252, 12, 224, "Text"],
Cell[11571, 278, 188, 5, 62, "Text"],
Cell[11762, 285, 197, 5, 62, "Text"],
Cell[11962, 292, 730, 17, 224, "Text"],
Cell[12695, 311, 332, 8, 108, "Text"],
Cell[13030, 321, 105, 1, 38, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[13172, 327, 1231, 16, 98, "Section"],
Cell[14406, 345, 1286, 17, 38, "Text"],
Cell[15695, 364, 484, 10, 85, "Text"],
Cell[16182, 376, 167, 3, 38, "Text"],
Cell[16352, 381, 155, 2, 38, "Text"],
Cell[16510, 385, 229, 5, 38, "Text"],
Cell[16742, 392, 739, 18, 39, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17518, 415, 1306, 21, 98, "Section"],
Cell[18827, 438, 253, 5, 38, "Text"],
Cell[19083, 445, 186, 4, 38, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[19306, 454, 229, 3, 98, "Section"],
Cell[19538, 459, 7527, 155, 677, "Text"],
Cell[27068, 616, 99, 1, 38, "Text"],
Cell[27170, 619, 852, 17, 109, "Text"],
Cell[28025, 638, 2585, 39, 108, "Text"],
Cell[30613, 679, 321, 8, 39, "Text"],
Cell[30937, 689, 210, 5, 63, "Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[31184, 699, 203, 3, 98, "Section"],
Cell[31390, 704, 650, 10, 108, "Text"],
Cell[32043, 716, 1220, 23, 201, "Text"],
Cell[33266, 741, 1298, 25, 131, "Text"],
Cell[34567, 768, 431, 8, 62, "Text"],
Cell[35001, 778, 940, 16, 131, "Text"],
Cell[35944, 796, 256, 5, 62, "Text"],
Cell[36203, 803, 676, 19, 164, "Code"],
Cell[36882, 824, 633, 12, 108, "Text"],
Cell[37518, 838, 478, 12, 39, "Text"],
Cell[37999, 852, 411, 13, 38, "Text"],
Cell[CellGroupData[{
Cell[38435, 869, 6918, 92, 52, "Subsection"],
Cell[45356, 963, 95, 1, 38, "Text"],
Cell[45454, 966, 19554, 359, 1880, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[65045, 1330, 6880, 92, 52, "Subsection"],
Cell[71928, 1424, 16832, 325, 1381, "Text"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[88809, 1755, 91, 1, 98, "Section"],
Cell[88903, 1758, 169, 5, 85, "Text"]
}, Open  ]],
Cell[CellGroupData[{
Cell[89109, 1768, 1247, 17, 98, "Section"],
Cell[90359, 1787, 387, 11, 38, "Text"],
Cell[90749, 1800, 1500, 24, 39, "Text"],
Cell[92252, 1826, 104, 1, 38, "Text"],
Cell[92359, 1829, 220, 6, 68, "Code"],
Cell[92582, 1837, 409, 11, 63, "Code"],
Cell[92994, 1850, 199, 5, 63, "Code"],
Cell[93196, 1857, 351, 10, 63, "Code"],
Cell[93550, 1869, 333, 9, 90, "Code"],
Cell[93886, 1880, 245, 7, 63, "Code"],
Cell[94134, 1889, 325, 9, 63, "Code"],
Cell[94462, 1900, 270, 7, 63, "Code"],
Cell[94735, 1909, 259, 7, 63, "Code"]
}, Open  ]],
Cell[CellGroupData[{
Cell[95031, 1921, 1179, 16, 98, "Section"],
Cell[96213, 1939, 865, 23, 63, "Text"],
Cell[97081, 1964, 240, 6, 38, "Text"],
Cell[97324, 1972, 400, 10, 38, "Text"],
Cell[97727, 1984, 657, 21, 57, "Text"],
Cell[98387, 2007, 214, 4, 38, "Text"],
Cell[98604, 2013, 776, 11, 108, "Text"],
Cell[99383, 2026, 287, 6, 38, "Text"],
Cell[99673, 2034, 360, 8, 63, "Text"],
Cell[100036, 2044, 142, 3, 38, "Text"],
Cell[100181, 2049, 108, 1, 38, "Text"],
Cell[100292, 2052, 429, 12, 63, "Code"]
}, Open  ]]
}, Open  ]]
}
]
*)

(* End of internal cache information *)
